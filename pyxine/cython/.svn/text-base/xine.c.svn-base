/* Generated by Cython 0.11.1 on Thu Apr 30 05:42:48 2009 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#include "structmember.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
       void *buf;
       PyObject *obj;
       Py_ssize_t len;
       Py_ssize_t itemsize;
       int readonly;
       int ndim;
       char *format;
       Py_ssize_t *shape;
       Py_ssize_t *strides;
       Py_ssize_t *suboffsets;
       void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyString_Type                PyBytes_Type
  #define PyString_CheckExact          PyBytes_CheckExact
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define PyBytes_Type                 PyString_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) PyInstanceMethod_New(func)
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
#else
  #define _USE_MATH_DEFINES
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif
#include <math.h>
#define __PYX_HAVE_API__xine
#include "xine_internal.h"
#include "xine.h"


#ifdef __GNUC__
#define INLINE __inline__
#elif _WIN32
#define INLINE __inline
#else
#define INLINE 
#endif

typedef struct {PyObject **p; char *s; long n; char is_unicode; char intern; char is_identifier;} __Pyx_StringTabEntry; /*proto*/



static int __pyx_skip_dispatch = 0;


/* Type Conversion Predeclarations */

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyBytes_FromString          PyString_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyString_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyString_AsString
#else
#define __Pyx_PyBytes_FromString          PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyBytes_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyBytes_AsString
#endif

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

#if !defined(T_PYSSIZET)
#if PY_VERSION_HEX < 0x02050000
#define T_PYSSIZET T_INT
#elif !defined(T_LONGLONG)
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))  ? T_INT  : \
        ((sizeof(Py_ssize_t) == sizeof(long)) ? T_LONG : -1))
#else
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))          ? T_INT      : \
        ((sizeof(Py_ssize_t) == sizeof(long))         ? T_LONG     : \
        ((sizeof(Py_ssize_t) == sizeof(PY_LONG_LONG)) ? T_LONGLONG : -1)))
#endif
#endif

#if !defined(T_SIZET)
#if !defined(T_ULONGLONG)
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))  ? T_UINT  : \
        ((sizeof(size_t) == sizeof(unsigned long)) ? T_ULONG : -1))
#else
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))          ? T_UINT      : \
        ((sizeof(size_t) == sizeof(unsigned long))         ? T_ULONG     : \
        ((sizeof(size_t) == sizeof(unsigned PY_LONG_LONG)) ? T_ULONGLONG : -1)))
#endif
#endif

static INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 ||               (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)) 
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;
static const char **__pyx_f;

#ifdef CYTHON_REFNANNY
typedef struct {
  void (*INCREF)(void*, PyObject*, int);
  void (*DECREF)(void*, PyObject*, int);
  void (*GOTREF)(void*, PyObject*, int);
  void (*GIVEREF)(void*, PyObject*, int);
  void* (*NewContext)(const char*, int, const char*);
  void (*FinishContext)(void**);
} __Pyx_RefnannyAPIStruct;
static __Pyx_RefnannyAPIStruct *__Pyx_Refnanny = NULL;
#define __Pyx_ImportRefcountAPI(name)   (__Pyx_RefnannyAPIStruct *) PyCObject_Import((char *)name, (char *)"RefnannyAPI")
#define __Pyx_INCREF(r) __Pyx_Refnanny->INCREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_DECREF(r) __Pyx_Refnanny->DECREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_GOTREF(r) __Pyx_Refnanny->GOTREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_GIVEREF(r) __Pyx_Refnanny->GIVEREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_XDECREF(r) if((r) == NULL) ; else __Pyx_DECREF(r)
#define __Pyx_SetupRefcountContext(name)   void* __pyx_refchk = __Pyx_Refnanny->NewContext((name), __LINE__, __FILE__)
#define __Pyx_FinishRefcountContext()   __Pyx_Refnanny->FinishContext(&__pyx_refchk)
#else
#define __Pyx_INCREF(r) Py_INCREF(r)
#define __Pyx_DECREF(r) Py_DECREF(r)
#define __Pyx_GOTREF(r)
#define __Pyx_GIVEREF(r)
#define __Pyx_XDECREF(r) Py_XDECREF(r)
#define __Pyx_SetupRefcountContext(name)
#define __Pyx_FinishRefcountContext()
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) if((r) == NULL) ; else __Pyx_GIVEREF(r)
#define __Pyx_XGOTREF(r) if((r) == NULL) ; else __Pyx_GOTREF(r)

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/


static INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
    }
    return r;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static int __Pyx_Print(PyObject *, int); /*proto*/
#if PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject *o); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static INLINE int __Pyx_StrEq(const char *, const char *); /*proto*/

static INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static INLINE char __Pyx_PyInt_AsChar(PyObject *);

static INLINE short __Pyx_PyInt_AsShort(PyObject *);

static INLINE int __Pyx_PyInt_AsInt(PyObject *);

static INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static INLINE long __Pyx_PyInt_AsLong(PyObject *);

static INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Type declarations */

typedef void (*__pyx_t_4xine_xine_log_cb_t)(void *, int);

typedef void (*__pyx_t_4xine_xine_event_listener_cb_t)(void *, const xine_event_t *);

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":382
 * # X.xinePlay(0,0)
 * import time
 * cdef class AudioEngine:             # <<<<<<<<<<<<<<
 * 	cdef object MrlQueue
 * 	cdef object LibXine
 */

struct __pyx_obj_4xine_AudioEngine {
  PyObject_HEAD
  PyObject *MrlQueue;
  PyObject *LibXine;
};

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":426
 * 			print self.LibXine.xineGetStreamInfo(Counter)
 * 			Counter = Counter + 1
 * cdef class libxine:             # <<<<<<<<<<<<<<
 * 
 * 	cdef xine_t *xinePtr
 */

struct __pyx_obj_4xine_libxine {
  PyObject_HEAD
  struct __pyx_vtabstruct_4xine_libxine *__pyx_vtab;
  xine_t *xinePtr;
  xine_audio_port_t *xineAudioPort;
  xine_video_port_t *xineVideoPort;
  xine_event_queue_t *xineEventQueue;
  const char *const *xinePostPlugins;
  xine_stream_t *xineStream;
};


struct __pyx_vtabstruct_4xine_libxine {
  PyObject *(*xineGetVersion)(struct __pyx_obj_4xine_libxine *, int *, int *, int *);
  PyObject *(*xineOpenVideoDriver)(struct __pyx_obj_4xine_libxine *, const char *, int, void *);
  PyObject *(*xineCloseVideoDriver)(struct __pyx_obj_4xine_libxine *, xine_video_port_t *);
  PyObject *(*xineGetLoadSectionCount)(struct __pyx_obj_4xine_libxine *);
  PyObject *(*xineEventNewQueue)(struct __pyx_obj_4xine_libxine *, xine_stream_t *);
  PyObject *(*xineConfigLoad)(struct __pyx_obj_4xine_libxine *, const char *);
};
static struct __pyx_vtabstruct_4xine_libxine *__pyx_vtabptr_4xine_libxine;
/* Module declarations from types */

/* Module declarations from xine_internal */

/* Module declarations from xine */

static PyTypeObject *__pyx_ptype_4xine_AudioEngine = 0;
static PyTypeObject *__pyx_ptype_4xine_libxine = 0;
__PYX_EXTERN_C const char* xine_get_version_string(void); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_get_version(int *, int *, int *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_check_version(int, int, int); /*proto*/
__PYX_EXTERN_C xine_t *xine_new(void); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_init(xine_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_exit(xine_t *); /*proto*/
__PYX_EXTERN_C xine_audio_port_t *xine_open_audio_driver(xine_t *, const char *, void *); /*proto*/
__PYX_EXTERN_C xine_video_port_t *xine_open_video_driver(xine_t *, const char *, int, void *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_close_audio_driver(xine_t *, xine_audio_port_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_close_video_driver(xine_t *, xine_video_port_t *); /*proto*/
__PYX_EXTERN_C xine_stream_t *xine_stream_new(xine_t *, xine_audio_port_t *, xine_video_port_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_stream_master_slave(xine_stream_t *, xine_stream_t *, int); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_open(xine_stream_t *, const char *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_play(xine_stream_t *, int, int); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_stop(xine_stream_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_close(xine_stream_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_eject(xine_stream_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_dispose(xine_stream_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_engine_set_param(xine_t *, int, int); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_engine_get_param(xine_t *, int); /*proto*/
__PYX_EXTERN_C xine_post_t *xine_post_init(xine_t *, const char *, int, xine_audio_port_t **, xine_video_port_t **); /*proto*/
__PYX_EXTERN_C const char *const *xine_list_post_plugins(xine_t *); /*proto*/
__PYX_EXTERN_C const char *const *xine_list_post_plugins_typed(xine_t *, int); /*proto*/
__PYX_EXTERN_C const char *const *xine_post_list_inputs(xine_post_t *); /*proto*/
__PYX_EXTERN_C const char *const *xine_post_list_outputs(xine_post_t *); /*proto*/
__PYX_EXTERN_C xine_post_in_t *xine_post_input(xine_post_t *, const char *); /*proto*/
__PYX_EXTERN_C xine_post_out_t *xine_post_output(xine_post_t *, const char *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_post_wire(xine_post_out_t *, xine_post_in_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_post_wire_video_port(xine_post_out_t *, xine_video_port_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_post_wire_audio_port(xine_post_out_t *, xine_audio_port_t *); /*proto*/
__PYX_EXTERN_C xine_post_out_t *xine_get_video_source(xine_stream_t *); /*proto*/
__PYX_EXTERN_C xine_post_out_t *xine_get_audio_source(xine_stream_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_post_dispose(xine_t *, xine_post_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_get_log_section_count(xine_t *); /*proto*/
__PYX_EXTERN_C const char *const *xine_get_log_names(xine_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_log(xine_t *, int, const char *, ...); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_vlog(xine_t *, int, const char *, va_list); /*proto*/
__PYX_EXTERN_C char *const *xine_get_log(xine_t *, int); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_get_error(xine_stream_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_get_status(xine_stream_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_get_audio_lang(xine_stream_t *, int, char *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_get_spu_lang(xine_stream_t *, int, char *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_get_pos_length(xine_stream_t *, int *, int *, int *); /*proto*/
__PYX_EXTERN_C uint32_t xine_get_stream_info(xine_stream_t *, int); /*proto*/
__PYX_EXTERN_C const char *xine_get_meta_info(xine_stream_t *, int); /*proto*/
__PYX_EXTERN_C const char *const *xine_get_browsable_input_plugin_ids(xine_t *); /*proto*/
__PYX_EXTERN_C xine_mrl_t * *xine_get_browse_mrls(xine_t *, const char *, const char *, int *); /*proto*/
__PYX_EXTERN_C const char *const *xine_get_autoplay_input_plugin_ids(xine_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(char) **xine_get_autoplay_mrls(xine_t *, const char *, int *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(char) *xine_get_file_extensions(xine_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(char) *xine_get_mime_types(xine_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(char) *xine_get_demux_for_mime_type(xine_t *, const char *); /*proto*/
__PYX_EXTERN_C const char *xine_get_input_plugin_description(xine_t *, const char *); /*proto*/
__PYX_EXTERN_C const char *xine_get_demux_plugin_description(xine_t *, const char *); /*proto*/
__PYX_EXTERN_C const char *xine_get_spu_plugin_description(xine_t *, const char *); /*proto*/
__PYX_EXTERN_C const char *xine_get_audio_plugin_description(xine_t *, const char *); /*proto*/
__PYX_EXTERN_C const char *xine_get_video_plugin_description(xine_t *, const char *); /*proto*/
__PYX_EXTERN_C const char *xine_get_audio_driver_plugin_description(xine_t *, const char *); /*proto*/
__PYX_EXTERN_C const char *xine_get_video_driver_plugin_description(xine_t *, const char *); /*proto*/
__PYX_EXTERN_C const char *xine_get_post_plugin_description(xine_t *, const char *); /*proto*/
__PYX_EXTERN_C const char *const *xine_list_audio_output_plugins(xine_t *); /*proto*/
__PYX_EXTERN_C const char *const *xine_list_video_output_plugins(xine_t *); /*proto*/
__PYX_EXTERN_C const char *const *xine_list_video_output_plugins_typed(xine_t *, uint64_t); /*proto*/
__PYX_EXTERN_C const char *const *xine_list_demuxer_plugins(xine_t *); /*proto*/
__PYX_EXTERN_C const char *const *xine_list_input_plugins(xine_t *); /*proto*/
__PYX_EXTERN_C const char *const *xine_list_spu_plugins(xine_t *); /*proto*/
__PYX_EXTERN_C const char *const *xine_list_audio_decoder_plugins(xine_t *); /*proto*/
__PYX_EXTERN_C const char *const *xine_list_video_decoder_plugins(xine_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_plugins_garbage_collector(xine_t *); /*proto*/
__PYX_EXTERN_C const char *xine_config_register_string(xine_t *, const char *, const char *, const char *, const char *, int, xine_config_cb_t, void *); /*proto*/
__PYX_EXTERN_C const char *xine_config_register_filename(xine_t *, const char *, const char *, int, const char *, const char *, int, xine_config_cb_t, void *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_config_register_range(xine_t *, const char *, int, int, int, const char *, const char *, int, xine_config_cb_t, void *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_config_register_enum(xine_t *, const char *, int, char **, const char *, const char *, int, xine_config_cb_t, void *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_config_register_num(xine_t *, const char *, int, const char *, const char *, int, xine_config_cb_t, void *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_config_register_bool(xine_t *, const char *, int, const char *, const char *, int, xine_config_cb_t, void *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_config_get_first_entry(xine_t *, xine_cfg_entry_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_config_get_next_entry(xine_t *, xine_cfg_entry_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(int) xine_config_lookup_entry(xine_t *, const char *, xine_cfg_entry_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_config_update_entry(xine_t *, const xine_cfg_entry_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_config_load(xine_t *, const char *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_config_save(xine_t *, const char *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_config_reset(xine_t *); /*proto*/
__PYX_EXTERN_C xine_event_queue_t *xine_event_new_queue(xine_stream_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_event_dispose_queue(xine_event_queue_t *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_event_create_listener_thread(xine_event_queue_t *, __pyx_t_4xine_xine_event_listener_cb_t, void *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(void) xine_event_send(xine_stream_t *, const xine_event_t *); /*proto*/

const char *__pyx_modulename = "xine";

/* Implementation of xine */
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_35;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static char __pyx_k___init__[] = "__init__";
static PyObject *__pyx_kp___init__;
static char __pyx_k_Initialize[] = "Initialize";
static PyObject *__pyx_kp_Initialize;
static char __pyx_k_DeInitialize[] = "DeInitialize";
static PyObject *__pyx_kp_DeInitialize;
static char __pyx_k_Open[] = "Open";
static PyObject *__pyx_kp_Open;
static char __pyx_k_Play[] = "Play";
static PyObject *__pyx_kp_Play;
static char __pyx_k_Stop[] = "Stop";
static PyObject *__pyx_kp_Stop;
static char __pyx_k_PlayStatus[] = "PlayStatus";
static PyObject *__pyx_kp_PlayStatus;
static char __pyx_k_PollStatus[] = "PollStatus";
static PyObject *__pyx_kp_PollStatus;
static char __pyx_k_GetMeta[] = "GetMeta";
static PyObject *__pyx_kp_GetMeta;
static char __pyx_k_GetAllMeta[] = "GetAllMeta";
static PyObject *__pyx_kp_GetAllMeta;
static char __pyx_k_GetStreamInfo[] = "GetStreamInfo";
static PyObject *__pyx_kp_GetStreamInfo;
static char __pyx_k_GetAllStreamInfo[] = "GetAllStreamInfo";
static PyObject *__pyx_kp_GetAllStreamInfo;
static char __pyx_k_xineGetError[] = "xineGetError";
static PyObject *__pyx_kp_xineGetError;
static char __pyx_k_1[] = "xineGetVersionString";
static PyObject *__pyx_kp_1;
static char __pyx_k_xineCheckVersion[] = "xineCheckVersion";
static PyObject *__pyx_kp_xineCheckVersion;
static char __pyx_k_xineNew[] = "xineNew";
static PyObject *__pyx_kp_xineNew;
static char __pyx_k_dbg_xineNew[] = "dbg_xineNew";
static PyObject *__pyx_kp_dbg_xineNew;
static char __pyx_k_xineInit[] = "xineInit";
static PyObject *__pyx_kp_xineInit;
static char __pyx_k_xineExit[] = "xineExit";
static PyObject *__pyx_kp_xineExit;
static char __pyx_k_xineOpenAudioDriver[] = "xineOpenAudioDriver";
static PyObject *__pyx_kp_xineOpenAudioDriver;
static char __pyx_k_2[] = "dbg_xineOpenAudioDriver";
static PyObject *__pyx_kp_2;
static char __pyx_k_3[] = "xineCloseAudioDriver";
static PyObject *__pyx_kp_3;
static char __pyx_k_xineStreamNew[] = "xineStreamNew";
static PyObject *__pyx_kp_xineStreamNew;
static char __pyx_k_dbg_xineStreamNew[] = "dbg_xineStreamNew";
static PyObject *__pyx_kp_dbg_xineStreamNew;
static char __pyx_k_xineOpen[] = "xineOpen";
static PyObject *__pyx_kp_xineOpen;
static char __pyx_k_xinePlay[] = "xinePlay";
static PyObject *__pyx_kp_xinePlay;
static char __pyx_k_xineStop[] = "xineStop";
static PyObject *__pyx_kp_xineStop;
static char __pyx_k_xineClose[] = "xineClose";
static PyObject *__pyx_kp_xineClose;
static char __pyx_k_xineEject[] = "xineEject";
static PyObject *__pyx_kp_xineEject;
static char __pyx_k_xineDispose[] = "xineDispose";
static PyObject *__pyx_kp_xineDispose;
static char __pyx_k_xineEngineSetParam[] = "xineEngineSetParam";
static PyObject *__pyx_kp_xineEngineSetParam;
static char __pyx_k_xineEngineGetParam[] = "xineEngineGetParam";
static PyObject *__pyx_kp_xineEngineGetParam;
static char __pyx_k_xineGetStatus[] = "xineGetStatus";
static PyObject *__pyx_kp_xineGetStatus;
static char __pyx_k_xineGetStreamInfo[] = "xineGetStreamInfo";
static PyObject *__pyx_kp_xineGetStreamInfo;
static char __pyx_k_xineGetMetaInfo[] = "xineGetMetaInfo";
static PyObject *__pyx_kp_xineGetMetaInfo;
static char __pyx_k_File[] = "File";
static PyObject *__pyx_kp_File;
static char __pyx_k_xineMetaCode[] = "xineMetaCode";
static PyObject *__pyx_kp_xineMetaCode;
static char __pyx_k_xineStreamCode[] = "xineStreamCode";
static PyObject *__pyx_kp_xineStreamCode;
static char __pyx_k_Major[] = "Major";
static PyObject *__pyx_kp_Major;
static char __pyx_k_Minor[] = "Minor";
static PyObject *__pyx_kp_Minor;
static char __pyx_k_Sub[] = "Sub";
static PyObject *__pyx_kp_Sub;
static char __pyx_k_Id[] = "Id";
static PyObject *__pyx_kp_Id;
static char __pyx_k_Mrl[] = "Mrl";
static PyObject *__pyx_kp_Mrl;
static char __pyx_k_StartPosition[] = "StartPosition";
static PyObject *__pyx_kp_StartPosition;
static char __pyx_k_StartTime[] = "StartTime";
static PyObject *__pyx_kp_StartTime;
static char __pyx_k_Parameter[] = "Parameter";
static PyObject *__pyx_kp_Parameter;
static char __pyx_k_Value[] = "Value";
static PyObject *__pyx_kp_Value;
static char __pyx_k_Info[] = "Info";
static PyObject *__pyx_kp_Info;
static char __pyx_k_time[] = "time";
static PyObject *__pyx_kp_time;
static char __pyx_k_4[] = "auto";
static PyObject *__pyx_kp_4;
static char __pyx_k_5[] = "XINE_STATUS_PLAY";
static PyObject *__pyx_kp_5;
static char __pyx_k_sleep[] = "sleep";
static PyObject *__pyx_kp_sleep;
static char __pyx_k_Exception[] = "Exception";
static PyObject *__pyx_kp_Exception;
static char __pyx_k_6[] = "NoInputPlugin";
static PyObject *__pyx_kp_6;
static char __pyx_k_7[] = "NoDemuxPlugin";
static PyObject *__pyx_kp_7;
static char __pyx_k_8[] = "DemuxFailed";
static PyObject *__pyx_kp_8;
static char __pyx_k_9[] = "MalformedMRL";
static PyObject *__pyx_kp_9;
static char __pyx_k_10[] = "InputFailed";
static PyObject *__pyx_kp_10;
static char __pyx_k_11[] = "XINE_STATUS_IDLE";
static PyObject *__pyx_kp_11;
static char __pyx_k_12[] = "XINE_STATUS_STOP";
static PyObject *__pyx_kp_12;
static char __pyx_k_13[] = "XINE_STATUS_PLAY";
static PyObject *__pyx_kp_13;
static char __pyx_k_14[] = "XINE_STATUS_QUIT";
static PyObject *__pyx_kp_14;
static char __pyx_k_15[] = "Title";
static PyObject *__pyx_kp_15;
static char __pyx_k_16[] = "Comment";
static PyObject *__pyx_kp_16;
static char __pyx_k_17[] = "Artist";
static PyObject *__pyx_kp_17;
static char __pyx_k_18[] = "Genre";
static PyObject *__pyx_kp_18;
static char __pyx_k_19[] = "Album";
static PyObject *__pyx_kp_19;
static char __pyx_k_20[] = "Year";
static PyObject *__pyx_kp_20;
static char __pyx_k_21[] = "MetaFail";
static PyObject *__pyx_kp_21;
static PyObject *__pyx_builtin_Exception;

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":385
 * 	cdef object MrlQueue
 * 	cdef object LibXine
 * 	def __init__(self):             # <<<<<<<<<<<<<<
 * 		self.MrlQueue = []
 * 	def Initialize(self):
 */

static int __pyx_pf_4xine_11AudioEngine___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_4xine_11AudioEngine___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("__init__");
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":386
 * 	cdef object LibXine
 * 	def __init__(self):
 * 		self.MrlQueue = []             # <<<<<<<<<<<<<<
 * 	def Initialize(self):
 * 		self.LibXine = libxine()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __Pyx_GOTREF(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->MrlQueue);
  __Pyx_DECREF(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->MrlQueue);
  ((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->MrlQueue = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("xine.AudioEngine.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":387
 * 	def __init__(self):
 * 		self.MrlQueue = []
 * 	def Initialize(self):             # <<<<<<<<<<<<<<
 * 		self.LibXine = libxine()
 * 		self.LibXine.xineNew()
 */

static PyObject *__pyx_pf_4xine_11AudioEngine_Initialize(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_11AudioEngine_Initialize(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_SetupRefcountContext("Initialize");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":388
 * 		self.MrlQueue = []
 * 	def Initialize(self):
 * 		self.LibXine = libxine()             # <<<<<<<<<<<<<<
 * 		self.LibXine.xineNew()
 * 		self.LibXine.xineInit()
 */
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4xine_libxine)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine);
  __Pyx_DECREF(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine);
  ((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":389
 * 	def Initialize(self):
 * 		self.LibXine = libxine()
 * 		self.LibXine.xineNew()             # <<<<<<<<<<<<<<
 * 		self.LibXine.xineInit()
 * 		self.LibXine.xineOpenAudioDriver("auto")
 */
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineNew); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":390
 * 		self.LibXine = libxine()
 * 		self.LibXine.xineNew()
 * 		self.LibXine.xineInit()             # <<<<<<<<<<<<<<
 * 		self.LibXine.xineOpenAudioDriver("auto")
 * 		self.LibXine.xineStreamNew()
 */
  __pyx_t_2 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineInit); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":391
 * 		self.LibXine.xineNew()
 * 		self.LibXine.xineInit()
 * 		self.LibXine.xineOpenAudioDriver("auto")             # <<<<<<<<<<<<<<
 * 		self.LibXine.xineStreamNew()
 * 	def DeInitialize(self):
 */
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineOpenAudioDriver); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_kp_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_4);
  __Pyx_GIVEREF(__pyx_kp_4);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":392
 * 		self.LibXine.xineInit()
 * 		self.LibXine.xineOpenAudioDriver("auto")
 * 		self.LibXine.xineStreamNew()             # <<<<<<<<<<<<<<
 * 	def DeInitialize(self):
 * 		self.LibXine.xineStop()
 */
  __pyx_t_3 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineStreamNew); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xine.AudioEngine.Initialize");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":393
 * 		self.LibXine.xineOpenAudioDriver("auto")
 * 		self.LibXine.xineStreamNew()
 * 	def DeInitialize(self):             # <<<<<<<<<<<<<<
 * 		self.LibXine.xineStop()
 * 		self.LibXine.xineClose()
 */

static PyObject *__pyx_pf_4xine_11AudioEngine_DeInitialize(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_11AudioEngine_DeInitialize(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("DeInitialize");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":394
 * 		self.LibXine.xineStreamNew()
 * 	def DeInitialize(self):
 * 		self.LibXine.xineStop()             # <<<<<<<<<<<<<<
 * 		self.LibXine.xineClose()
 * 		self.LibXine.xineDispose()
 */
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineStop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":395
 * 	def DeInitialize(self):
 * 		self.LibXine.xineStop()
 * 		self.LibXine.xineClose()             # <<<<<<<<<<<<<<
 * 		self.LibXine.xineDispose()
 * 		self.LibXine.xineCloseAudioDriver()
 */
  __pyx_t_2 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineClose); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":396
 * 		self.LibXine.xineStop()
 * 		self.LibXine.xineClose()
 * 		self.LibXine.xineDispose()             # <<<<<<<<<<<<<<
 * 		self.LibXine.xineCloseAudioDriver()
 * 		self.LibXine.xineExit()
 */
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineDispose); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":397
 * 		self.LibXine.xineClose()
 * 		self.LibXine.xineDispose()
 * 		self.LibXine.xineCloseAudioDriver()             # <<<<<<<<<<<<<<
 * 		self.LibXine.xineExit()
 * 	def Open(self,File):
 */
  __pyx_t_2 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":398
 * 		self.LibXine.xineDispose()
 * 		self.LibXine.xineCloseAudioDriver()
 * 		self.LibXine.xineExit()             # <<<<<<<<<<<<<<
 * 	def Open(self,File):
 * 		self.LibXine.xineOpen(File)
 */
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineExit); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("xine.AudioEngine.DeInitialize");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":399
 * 		self.LibXine.xineCloseAudioDriver()
 * 		self.LibXine.xineExit()
 * 	def Open(self,File):             # <<<<<<<<<<<<<<
 * 		self.LibXine.xineOpen(File)
 * 	def Play(self):
 */

static PyObject *__pyx_pf_4xine_11AudioEngine_Open(PyObject *__pyx_v_self, PyObject *__pyx_v_File); /*proto*/
static PyObject *__pyx_pf_4xine_11AudioEngine_Open(PyObject *__pyx_v_self, PyObject *__pyx_v_File) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_SetupRefcountContext("Open");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":400
 * 		self.LibXine.xineExit()
 * 	def Open(self,File):
 * 		self.LibXine.xineOpen(File)             # <<<<<<<<<<<<<<
 * 	def Play(self):
 * 		self.LibXine.xinePlay(0,0)
 */
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineOpen); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_File);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_File);
  __Pyx_GIVEREF(__pyx_v_File);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xine.AudioEngine.Open");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":401
 * 	def Open(self,File):
 * 		self.LibXine.xineOpen(File)
 * 	def Play(self):             # <<<<<<<<<<<<<<
 * 		self.LibXine.xinePlay(0,0)
 * 	def Stop(self):
 */

static PyObject *__pyx_pf_4xine_11AudioEngine_Play(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_11AudioEngine_Play(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_SetupRefcountContext("Play");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":402
 * 		self.LibXine.xineOpen(File)
 * 	def Play(self):
 * 		self.LibXine.xinePlay(0,0)             # <<<<<<<<<<<<<<
 * 	def Stop(self):
 * 		self.LibXine.xineStop()
 */
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xinePlay); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xine.AudioEngine.Play");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":403
 * 	def Play(self):
 * 		self.LibXine.xinePlay(0,0)
 * 	def Stop(self):             # <<<<<<<<<<<<<<
 * 		self.LibXine.xineStop()
 * 	def PlayStatus(self):
 */

static PyObject *__pyx_pf_4xine_11AudioEngine_Stop(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_11AudioEngine_Stop(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("Stop");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":404
 * 		self.LibXine.xinePlay(0,0)
 * 	def Stop(self):
 * 		self.LibXine.xineStop()             # <<<<<<<<<<<<<<
 * 	def PlayStatus(self):
 * 		return self.LibXine.xineGetStatus()
 */
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineStop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("xine.AudioEngine.Stop");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":405
 * 	def Stop(self):
 * 		self.LibXine.xineStop()
 * 	def PlayStatus(self):             # <<<<<<<<<<<<<<
 * 		return self.LibXine.xineGetStatus()
 * 	def PollStatus(self):
 */

static PyObject *__pyx_pf_4xine_11AudioEngine_PlayStatus(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_11AudioEngine_PlayStatus(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("PlayStatus");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":406
 * 		self.LibXine.xineStop()
 * 	def PlayStatus(self):
 * 		return self.LibXine.xineGetStatus()             # <<<<<<<<<<<<<<
 * 	def PollStatus(self):
 * 		waitTime = 0.02
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineGetStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("xine.AudioEngine.PlayStatus");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":407
 * 	def PlayStatus(self):
 * 		return self.LibXine.xineGetStatus()
 * 	def PollStatus(self):             # <<<<<<<<<<<<<<
 * 		waitTime = 0.02
 * 		while self.PlayStatus() == 'XINE_STATUS_PLAY':
 */

static PyObject *__pyx_pf_4xine_11AudioEngine_PollStatus(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_11AudioEngine_PollStatus(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_v_waitTime;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_SetupRefcountContext("PollStatus");
  __pyx_v_waitTime = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":408
 * 		return self.LibXine.xineGetStatus()
 * 	def PollStatus(self):
 * 		waitTime = 0.02             # <<<<<<<<<<<<<<
 * 		while self.PlayStatus() == 'XINE_STATUS_PLAY':
 * 			time.sleep(waitTime)
 */
  __pyx_t_1 = PyFloat_FromDouble(0.02); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_waitTime);
  __pyx_v_waitTime = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":409
 * 	def PollStatus(self):
 * 		waitTime = 0.02
 * 		while self.PlayStatus() == 'XINE_STATUS_PLAY':             # <<<<<<<<<<<<<<
 * 			time.sleep(waitTime)
 * 		return True
 */
  while (1) {
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_PlayStatus); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_kp_5, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!__pyx_t_3) break;

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":410
 * 		waitTime = 0.02
 * 		while self.PlayStatus() == 'XINE_STATUS_PLAY':
 * 			time.sleep(waitTime)             # <<<<<<<<<<<<<<
 * 		return True
 * 	def GetMeta(self,xineMetaCode):
 */
    __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_time); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_1);
    __pyx_t_1 = PyObject_GetAttr(__pyx_1, __pyx_kp_sleep); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_INCREF(__pyx_v_waitTime);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_waitTime);
    __Pyx_GIVEREF(__pyx_v_waitTime);
    __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":411
 * 		while self.PlayStatus() == 'XINE_STATUS_PLAY':
 * 			time.sleep(waitTime)
 * 		return True             # <<<<<<<<<<<<<<
 * 	def GetMeta(self,xineMetaCode):
 * 		return self.LibXine.xineGetMetaInfo(xineMetaCode)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("xine.AudioEngine.PollStatus");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_waitTime);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":412
 * 			time.sleep(waitTime)
 * 		return True
 * 	def GetMeta(self,xineMetaCode):             # <<<<<<<<<<<<<<
 * 		return self.LibXine.xineGetMetaInfo(xineMetaCode)
 * 	def GetAllMeta(self):
 */

static PyObject *__pyx_pf_4xine_11AudioEngine_GetMeta(PyObject *__pyx_v_self, PyObject *__pyx_v_xineMetaCode); /*proto*/
static PyObject *__pyx_pf_4xine_11AudioEngine_GetMeta(PyObject *__pyx_v_self, PyObject *__pyx_v_xineMetaCode) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_SetupRefcountContext("GetMeta");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":413
 * 		return True
 * 	def GetMeta(self,xineMetaCode):
 * 		return self.LibXine.xineGetMetaInfo(xineMetaCode)             # <<<<<<<<<<<<<<
 * 	def GetAllMeta(self):
 * 		Counter = 0
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineGetMetaInfo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_xineMetaCode);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_xineMetaCode);
  __Pyx_GIVEREF(__pyx_v_xineMetaCode);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xine.AudioEngine.GetMeta");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":414
 * 	def GetMeta(self,xineMetaCode):
 * 		return self.LibXine.xineGetMetaInfo(xineMetaCode)
 * 	def GetAllMeta(self):             # <<<<<<<<<<<<<<
 * 		Counter = 0
 * 		while Counter <= 12:
 */

static PyObject *__pyx_pf_4xine_11AudioEngine_GetAllMeta(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_11AudioEngine_GetAllMeta(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_v_Counter;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_SetupRefcountContext("GetAllMeta");
  __pyx_v_Counter = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":415
 * 		return self.LibXine.xineGetMetaInfo(xineMetaCode)
 * 	def GetAllMeta(self):
 * 		Counter = 0             # <<<<<<<<<<<<<<
 * 		while Counter <= 12:
 * 			print self.LibXine.xineGetMetaInfo(Counter)
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_DECREF(__pyx_v_Counter);
  __pyx_v_Counter = __pyx_int_0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":416
 * 	def GetAllMeta(self):
 * 		Counter = 0
 * 		while Counter <= 12:             # <<<<<<<<<<<<<<
 * 			print self.LibXine.xineGetMetaInfo(Counter)
 * 			Counter = Counter + 1
 */
  while (1) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_Counter, __pyx_int_12, Py_LE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!__pyx_t_2) break;

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":417
 * 		Counter = 0
 * 		while Counter <= 12:
 * 			print self.LibXine.xineGetMetaInfo(Counter)             # <<<<<<<<<<<<<<
 * 			Counter = Counter + 1
 * 	def GetStreamInfo(self,xineStreamCode):
 */
    __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineGetMetaInfo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_v_Counter);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_Counter);
    __Pyx_GIVEREF(__pyx_v_Counter);
    __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    if (__Pyx_PrintOne(__pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":418
 * 		while Counter <= 12:
 * 			print self.LibXine.xineGetMetaInfo(Counter)
 * 			Counter = Counter + 1             # <<<<<<<<<<<<<<
 * 	def GetStreamInfo(self,xineStreamCode):
 * 		return self.LibXine.xineGetStreamInfo(xineStreamCode)
 */
    __pyx_t_4 = PyNumber_Add(__pyx_v_Counter, __pyx_int_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_Counter);
    __pyx_v_Counter = __pyx_t_4;
    __pyx_t_4 = 0;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("xine.AudioEngine.GetAllMeta");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_Counter);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":419
 * 			print self.LibXine.xineGetMetaInfo(Counter)
 * 			Counter = Counter + 1
 * 	def GetStreamInfo(self,xineStreamCode):             # <<<<<<<<<<<<<<
 * 		return self.LibXine.xineGetStreamInfo(xineStreamCode)
 * 	def GetAllStreamInfo(self):
 */

static PyObject *__pyx_pf_4xine_11AudioEngine_GetStreamInfo(PyObject *__pyx_v_self, PyObject *__pyx_v_xineStreamCode); /*proto*/
static PyObject *__pyx_pf_4xine_11AudioEngine_GetStreamInfo(PyObject *__pyx_v_self, PyObject *__pyx_v_xineStreamCode) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_SetupRefcountContext("GetStreamInfo");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":420
 * 			Counter = Counter + 1
 * 	def GetStreamInfo(self,xineStreamCode):
 * 		return self.LibXine.xineGetStreamInfo(xineStreamCode)             # <<<<<<<<<<<<<<
 * 	def GetAllStreamInfo(self):
 * 		Counter = 0
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineGetStreamInfo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_xineStreamCode);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_xineStreamCode);
  __Pyx_GIVEREF(__pyx_v_xineStreamCode);
  __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xine.AudioEngine.GetStreamInfo");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":421
 * 	def GetStreamInfo(self,xineStreamCode):
 * 		return self.LibXine.xineGetStreamInfo(xineStreamCode)
 * 	def GetAllStreamInfo(self):             # <<<<<<<<<<<<<<
 * 		Counter = 0
 * 		while Counter <= 35:
 */

static PyObject *__pyx_pf_4xine_11AudioEngine_GetAllStreamInfo(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_11AudioEngine_GetAllStreamInfo(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_v_Counter;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_SetupRefcountContext("GetAllStreamInfo");
  __pyx_v_Counter = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":422
 * 		return self.LibXine.xineGetStreamInfo(xineStreamCode)
 * 	def GetAllStreamInfo(self):
 * 		Counter = 0             # <<<<<<<<<<<<<<
 * 		while Counter <= 35:
 * 			print self.LibXine.xineGetStreamInfo(Counter)
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_DECREF(__pyx_v_Counter);
  __pyx_v_Counter = __pyx_int_0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":423
 * 	def GetAllStreamInfo(self):
 * 		Counter = 0
 * 		while Counter <= 35:             # <<<<<<<<<<<<<<
 * 			print self.LibXine.xineGetStreamInfo(Counter)
 * 			Counter = Counter + 1
 */
  while (1) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_Counter, __pyx_int_35, Py_LE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!__pyx_t_2) break;

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":424
 * 		Counter = 0
 * 		while Counter <= 35:
 * 			print self.LibXine.xineGetStreamInfo(Counter)             # <<<<<<<<<<<<<<
 * 			Counter = Counter + 1
 * cdef class libxine:
 */
    __pyx_t_1 = PyObject_GetAttr(((struct __pyx_obj_4xine_AudioEngine *)__pyx_v_self)->LibXine, __pyx_kp_xineGetStreamInfo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_v_Counter);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_Counter);
    __Pyx_GIVEREF(__pyx_v_Counter);
    __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    if (__Pyx_PrintOne(__pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":425
 * 		while Counter <= 35:
 * 			print self.LibXine.xineGetStreamInfo(Counter)
 * 			Counter = Counter + 1             # <<<<<<<<<<<<<<
 * cdef class libxine:
 * 
 */
    __pyx_t_4 = PyNumber_Add(__pyx_v_Counter, __pyx_int_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_Counter);
    __pyx_v_Counter = __pyx_t_4;
    __pyx_t_4 = 0;
  }

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("xine.AudioEngine.GetAllStreamInfo");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_Counter);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":435
 * 	cdef xine_stream_t *xineStream
 * 
 * 	def xineGetError(self):             # <<<<<<<<<<<<<<
 * 		Error = xine_get_error(self.xineStream)
 * 		if Error == 1:
 */

static PyObject *__pyx_pf_4xine_7libxine_xineGetError(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineGetError(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_v_Error;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_SetupRefcountContext("xineGetError");
  __pyx_v_Error = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":436
 * 
 * 	def xineGetError(self):
 * 		Error = xine_get_error(self.xineStream)             # <<<<<<<<<<<<<<
 * 		if Error == 1:
 * 			raise Exception('NoInputPlugin')
 */
  __pyx_t_1 = PyInt_FromLong(xine_get_error(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineStream)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_Error);
  __pyx_v_Error = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":437
 * 	def xineGetError(self):
 * 		Error = xine_get_error(self.xineStream)
 * 		if Error == 1:             # <<<<<<<<<<<<<<
 * 			raise Exception('NoInputPlugin')
 * 		if Error == 2:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_Error, __pyx_int_1, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":438
 * 		Error = xine_get_error(self.xineStream)
 * 		if Error == 1:
 * 			raise Exception('NoInputPlugin')             # <<<<<<<<<<<<<<
 * 		if Error == 2:
 * 			raise Exception('NoDemuxPlugin')
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(__pyx_kp_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_6);
    __Pyx_GIVEREF(__pyx_kp_6);
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":439
 * 		if Error == 1:
 * 			raise Exception('NoInputPlugin')
 * 		if Error == 2:             # <<<<<<<<<<<<<<
 * 			raise Exception('NoDemuxPlugin')
 * 		if Error == 3:
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_Error, __pyx_int_2, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":440
 * 			raise Exception('NoInputPlugin')
 * 		if Error == 2:
 * 			raise Exception('NoDemuxPlugin')             # <<<<<<<<<<<<<<
 * 		if Error == 3:
 * 			raise Exception('DemuxFailed')
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_kp_7);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_7);
    __Pyx_GIVEREF(__pyx_kp_7);
    __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":441
 * 		if Error == 2:
 * 			raise Exception('NoDemuxPlugin')
 * 		if Error == 3:             # <<<<<<<<<<<<<<
 * 			raise Exception('DemuxFailed')
 * 		if Error == 4:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_Error, __pyx_int_3, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":442
 * 			raise Exception('NoDemuxPlugin')
 * 		if Error == 3:
 * 			raise Exception('DemuxFailed')             # <<<<<<<<<<<<<<
 * 		if Error == 4:
 * 			raise Exception('MalformedMRL')
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(__pyx_kp_8);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_8);
    __Pyx_GIVEREF(__pyx_kp_8);
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":443
 * 		if Error == 3:
 * 			raise Exception('DemuxFailed')
 * 		if Error == 4:             # <<<<<<<<<<<<<<
 * 			raise Exception('MalformedMRL')
 * 		if Error == 5:
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_Error, __pyx_int_4, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":444
 * 			raise Exception('DemuxFailed')
 * 		if Error == 4:
 * 			raise Exception('MalformedMRL')             # <<<<<<<<<<<<<<
 * 		if Error == 5:
 * 			raise Exception('InputFailed')
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_kp_9);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_9);
    __Pyx_GIVEREF(__pyx_kp_9);
    __pyx_t_1 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L8;
  }
  __pyx_L8:;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":445
 * 		if Error == 4:
 * 			raise Exception('MalformedMRL')
 * 		if Error == 5:             # <<<<<<<<<<<<<<
 * 			raise Exception('InputFailed')
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_Error, __pyx_int_5, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":446
 * 			raise Exception('MalformedMRL')
 * 		if Error == 5:
 * 			raise Exception('InputFailed')             # <<<<<<<<<<<<<<
 * 
 * 	# DONE: Tested
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __Pyx_INCREF(__pyx_kp_10);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_10);
    __Pyx_GIVEREF(__pyx_kp_10);
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L9;
  }
  __pyx_L9:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xine.libxine.xineGetError");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_Error);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":450
 * 	# DONE: Tested
 * 	# DONE: Unit test
 * 	def xineGetVersionString(self):             # <<<<<<<<<<<<<<
 * 		return xine_get_version_string()
 * 
 */

static PyObject *__pyx_pf_4xine_7libxine_xineGetVersionString(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineGetVersionString(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("xineGetVersionString");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":451
 * 	# DONE: Unit test
 * 	def xineGetVersionString(self):
 * 		return xine_get_version_string()             # <<<<<<<<<<<<<<
 * 
 * 	# Returns void
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(xine_get_version_string()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("xine.libxine.xineGetVersionString");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":454
 * 
 * 	# Returns void
 * 	cdef xineGetVersion(self,int *Major,int *Minor,int *Sub):             # <<<<<<<<<<<<<<
 * 		xine_get_version(Major,Minor,Sub)
 * 
 */

static  PyObject *__pyx_f_4xine_7libxine_xineGetVersion(struct __pyx_obj_4xine_libxine *__pyx_v_self, int *__pyx_v_Major, int *__pyx_v_Minor, int *__pyx_v_Sub) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineGetVersion");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":455
 * 	# Returns void
 * 	cdef xineGetVersion(self,int *Major,int *Minor,int *Sub):
 * 		xine_get_version(Major,Minor,Sub)             # <<<<<<<<<<<<<<
 * 
 * 	# DONE: Tested
 */
  xine_get_version(__pyx_v_Major, __pyx_v_Minor, __pyx_v_Sub);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":459
 * 	# DONE: Tested
 * 	# DONE: Unit test
 * 	def xineCheckVersion(self,Major,Minor,Sub):             # <<<<<<<<<<<<<<
 * 		Version = xine_check_version(Major,Minor,Sub)
 * 		if Version:
 */

static PyObject *__pyx_pf_4xine_7libxine_xineCheckVersion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineCheckVersion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Major = 0;
  PyObject *__pyx_v_Minor = 0;
  PyObject *__pyx_v_Sub = 0;
  PyObject *__pyx_v_Version;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_Major,&__pyx_kp_Minor,&__pyx_kp_Sub,0};
  __Pyx_SetupRefcountContext("xineCheckVersion");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_Major);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_Minor);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("xineCheckVersion", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_kp_Sub);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("xineCheckVersion", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "xineCheckVersion") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_Major = values[0];
    __pyx_v_Minor = values[1];
    __pyx_v_Sub = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_Major = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_Minor = PyTuple_GET_ITEM(__pyx_args, 1);
    __pyx_v_Sub = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("xineCheckVersion", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("xine.libxine.xineCheckVersion");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_Version = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":460
 * 	# DONE: Unit test
 * 	def xineCheckVersion(self,Major,Minor,Sub):
 * 		Version = xine_check_version(Major,Minor,Sub)             # <<<<<<<<<<<<<<
 * 		if Version:
 * 			return True
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_Major); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v_Minor); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_Sub); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = PyInt_FromLong(xine_check_version(__pyx_t_1, __pyx_t_2, __pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_v_Version);
  __pyx_v_Version = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":461
 * 	def xineCheckVersion(self,Major,Minor,Sub):
 * 		Version = xine_check_version(Major,Minor,Sub)
 * 		if Version:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else:
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_Version); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_5) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":462
 * 		Version = xine_check_version(Major,Minor,Sub)
 * 		if Version:
 * 			return True             # <<<<<<<<<<<<<<
 * 		else:
 * 			return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":464
 * 			return True
 * 		else:
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 	# Returns xine_stream_t
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("xine.libxine.xineCheckVersion");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_Version);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":469
 * 	# DONE: Tested
 * 	# DONE: Unit test
 * 	def xineNew(self):             # <<<<<<<<<<<<<<
 * 		self.xinePtr = xine_new()
 * 	def dbg_xineNew(self):
 */

static PyObject *__pyx_pf_4xine_7libxine_xineNew(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineNew(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineNew");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":470
 * 	# DONE: Unit test
 * 	def xineNew(self):
 * 		self.xinePtr = xine_new()             # <<<<<<<<<<<<<<
 * 	def dbg_xineNew(self):
 * 		if self.xinePtr == NULL:
 */
  ((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xinePtr = xine_new();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":471
 * 	def xineNew(self):
 * 		self.xinePtr = xine_new()
 * 	def dbg_xineNew(self):             # <<<<<<<<<<<<<<
 * 		if self.xinePtr == NULL:
 * 			return False
 */

static PyObject *__pyx_pf_4xine_7libxine_dbg_xineNew(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_dbg_xineNew(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("dbg_xineNew");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":472
 * 		self.xinePtr = xine_new()
 * 	def dbg_xineNew(self):
 * 		if self.xinePtr == NULL:             # <<<<<<<<<<<<<<
 * 			return False
 * 		else:
 */
  __pyx_t_1 = (((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xinePtr == NULL);
  if (__pyx_t_1) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":473
 * 	def dbg_xineNew(self):
 * 		if self.xinePtr == NULL:
 * 			return False             # <<<<<<<<<<<<<<
 * 		else:
 * 			return True
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":475
 * 			return False
 * 		else:
 * 			return True             # <<<<<<<<<<<<<<
 * 
 * 	# Returns void
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("xine.libxine.dbg_xineNew");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":478
 * 
 * 	# Returns void
 * 	def xineInit(self):             # <<<<<<<<<<<<<<
 * 		xine_init(self.xinePtr)
 * 
 */

static PyObject *__pyx_pf_4xine_7libxine_xineInit(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineInit(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineInit");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":479
 * 	# Returns void
 * 	def xineInit(self):
 * 		xine_init(self.xinePtr)             # <<<<<<<<<<<<<<
 * 
 * 	# Returns void
 */
  xine_init(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xinePtr);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":482
 * 
 * 	# Returns void
 * 	def xineExit(self):             # <<<<<<<<<<<<<<
 * 		xine_exit(self.xinePtr)
 * 
 */

static PyObject *__pyx_pf_4xine_7libxine_xineExit(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineExit(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineExit");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":483
 * 	# Returns void
 * 	def xineExit(self):
 * 		xine_exit(self.xinePtr)             # <<<<<<<<<<<<<<
 * 
 * 	# DONE: Tested
 */
  xine_exit(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xinePtr);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":487
 * 	# DONE: Tested
 * 	# DONE: Unit tested
 * 	def xineOpenAudioDriver(self,char *Id):             # <<<<<<<<<<<<<<
 * 		#print Id
 * 		cdef ConstCharPtr *Cast
 */

static PyObject *__pyx_pf_4xine_7libxine_xineOpenAudioDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_Id); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineOpenAudioDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_Id) {
  char *__pyx_v_Id;
  const char *__pyx_v_Cast;
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineOpenAudioDriver");
  assert(__pyx_arg_Id); {
    __pyx_v_Id = __Pyx_PyBytes_AsString(__pyx_arg_Id); if (unlikely((!__pyx_v_Id) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("xine.libxine.xineOpenAudioDriver");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":490
 * 		#print Id
 * 		cdef ConstCharPtr *Cast
 * 		Cast = <ConstCharPtr *> Id             # <<<<<<<<<<<<<<
 * 		self.xineAudioPort = xine_open_audio_driver(self.xinePtr,Cast,NULL)
 * 	def dbg_xineOpenAudioDriver(self):
 */
  __pyx_v_Cast = ((const char *)__pyx_v_Id);

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":491
 * 		cdef ConstCharPtr *Cast
 * 		Cast = <ConstCharPtr *> Id
 * 		self.xineAudioPort = xine_open_audio_driver(self.xinePtr,Cast,NULL)             # <<<<<<<<<<<<<<
 * 	def dbg_xineOpenAudioDriver(self):
 * 		if self.xineAudioPort == NULL:
 */
  ((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineAudioPort = xine_open_audio_driver(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xinePtr, __pyx_v_Cast, NULL);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":492
 * 		Cast = <ConstCharPtr *> Id
 * 		self.xineAudioPort = xine_open_audio_driver(self.xinePtr,Cast,NULL)
 * 	def dbg_xineOpenAudioDriver(self):             # <<<<<<<<<<<<<<
 * 		if self.xineAudioPort == NULL:
 * 			return False
 */

static PyObject *__pyx_pf_4xine_7libxine_dbg_xineOpenAudioDriver(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_dbg_xineOpenAudioDriver(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("dbg_xineOpenAudioDriver");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":493
 * 		self.xineAudioPort = xine_open_audio_driver(self.xinePtr,Cast,NULL)
 * 	def dbg_xineOpenAudioDriver(self):
 * 		if self.xineAudioPort == NULL:             # <<<<<<<<<<<<<<
 * 			return False
 * 		else:
 */
  __pyx_t_1 = (((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineAudioPort == NULL);
  if (__pyx_t_1) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":494
 * 	def dbg_xineOpenAudioDriver(self):
 * 		if self.xineAudioPort == NULL:
 * 			return False             # <<<<<<<<<<<<<<
 * 		else:
 * 			return True
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":496
 * 			return False
 * 		else:
 * 			return True             # <<<<<<<<<<<<<<
 * 
 * 	cdef public xineOpenVideoDriver(self,ConstCharPtr *Id,int Visual,void *Data):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("xine.libxine.dbg_xineOpenAudioDriver");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":498
 * 			return True
 * 
 * 	cdef public xineOpenVideoDriver(self,ConstCharPtr *Id,int Visual,void *Data):             # <<<<<<<<<<<<<<
 * 		self.xineVideoPort = xine_open_video_driver(self.xinePtr,Id,Visual,Data)
 * 	def xineCloseAudioDriver(self):
 */

 DL_EXPORT(PyObject) *__pyx_f_4xine_7libxine_xineOpenVideoDriver(struct __pyx_obj_4xine_libxine *__pyx_v_self, const char *__pyx_v_Id, int __pyx_v_Visual, void *__pyx_v_Data) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineOpenVideoDriver");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":499
 * 
 * 	cdef public xineOpenVideoDriver(self,ConstCharPtr *Id,int Visual,void *Data):
 * 		self.xineVideoPort = xine_open_video_driver(self.xinePtr,Id,Visual,Data)             # <<<<<<<<<<<<<<
 * 	def xineCloseAudioDriver(self):
 * 		xine_close_audio_driver(self.xinePtr,self.xineAudioPort)
 */
  __pyx_v_self->xineVideoPort = xine_open_video_driver(__pyx_v_self->xinePtr, __pyx_v_Id, __pyx_v_Visual, __pyx_v_Data);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":500
 * 	cdef public xineOpenVideoDriver(self,ConstCharPtr *Id,int Visual,void *Data):
 * 		self.xineVideoPort = xine_open_video_driver(self.xinePtr,Id,Visual,Data)
 * 	def xineCloseAudioDriver(self):             # <<<<<<<<<<<<<<
 * 		xine_close_audio_driver(self.xinePtr,self.xineAudioPort)
 * 	cdef public xineCloseVideoDriver(self,xine_video_port_t *Driver):
 */

static PyObject *__pyx_pf_4xine_7libxine_xineCloseAudioDriver(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineCloseAudioDriver(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineCloseAudioDriver");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":501
 * 		self.xineVideoPort = xine_open_video_driver(self.xinePtr,Id,Visual,Data)
 * 	def xineCloseAudioDriver(self):
 * 		xine_close_audio_driver(self.xinePtr,self.xineAudioPort)             # <<<<<<<<<<<<<<
 * 	cdef public xineCloseVideoDriver(self,xine_video_port_t *Driver):
 * 		xine_close_video_driver(self.xinePtr,Driver)
 */
  xine_close_audio_driver(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xinePtr, ((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineAudioPort);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":502
 * 	def xineCloseAudioDriver(self):
 * 		xine_close_audio_driver(self.xinePtr,self.xineAudioPort)
 * 	cdef public xineCloseVideoDriver(self,xine_video_port_t *Driver):             # <<<<<<<<<<<<<<
 * 		xine_close_video_driver(self.xinePtr,Driver)
 * 
 */

 DL_EXPORT(PyObject) *__pyx_f_4xine_7libxine_xineCloseVideoDriver(struct __pyx_obj_4xine_libxine *__pyx_v_self, xine_video_port_t *__pyx_v_Driver) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineCloseVideoDriver");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":503
 * 		xine_close_audio_driver(self.xinePtr,self.xineAudioPort)
 * 	cdef public xineCloseVideoDriver(self,xine_video_port_t *Driver):
 * 		xine_close_video_driver(self.xinePtr,Driver)             # <<<<<<<<<<<<<<
 * 
 * 	# DONE: Tested
 */
  xine_close_video_driver(__pyx_v_self->xinePtr, __pyx_v_Driver);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":507
 * 	# DONE: Tested
 * 	# DONE: Unit tested
 * 	def xineStreamNew(self):             # <<<<<<<<<<<<<<
 * 		self.xineStream = xine_stream_new(self.xinePtr,self.xineAudioPort,NULL)
 * 	def dbg_xineStreamNew(self):
 */

static PyObject *__pyx_pf_4xine_7libxine_xineStreamNew(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineStreamNew(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineStreamNew");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":508
 * 	# DONE: Unit tested
 * 	def xineStreamNew(self):
 * 		self.xineStream = xine_stream_new(self.xinePtr,self.xineAudioPort,NULL)             # <<<<<<<<<<<<<<
 * 	def dbg_xineStreamNew(self):
 * 		if self.xineStream == NULL:
 */
  ((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineStream = xine_stream_new(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xinePtr, ((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineAudioPort, NULL);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":509
 * 	def xineStreamNew(self):
 * 		self.xineStream = xine_stream_new(self.xinePtr,self.xineAudioPort,NULL)
 * 	def dbg_xineStreamNew(self):             # <<<<<<<<<<<<<<
 * 		if self.xineStream == NULL:
 * 			return False
 */

static PyObject *__pyx_pf_4xine_7libxine_dbg_xineStreamNew(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_dbg_xineStreamNew(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("dbg_xineStreamNew");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":510
 * 		self.xineStream = xine_stream_new(self.xinePtr,self.xineAudioPort,NULL)
 * 	def dbg_xineStreamNew(self):
 * 		if self.xineStream == NULL:             # <<<<<<<<<<<<<<
 * 			return False
 * 		else:
 */
  __pyx_t_1 = (((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineStream == NULL);
  if (__pyx_t_1) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":511
 * 	def dbg_xineStreamNew(self):
 * 		if self.xineStream == NULL:
 * 			return False             # <<<<<<<<<<<<<<
 * 		else:
 * 			return True
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":513
 * 			return False
 * 		else:
 * 			return True             # <<<<<<<<<<<<<<
 * 
 * 	# DONE: Tested
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("xine.libxine.dbg_xineStreamNew");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":517
 * 	# DONE: Tested
 * 	# DONE: Unit tested
 * 	def xineOpen(self,char *Mrl):             # <<<<<<<<<<<<<<
 * 		Open = xine_open(self.xineStream,<ConstCharPtr *>Mrl)
 * 		if Open == 1:
 */

static PyObject *__pyx_pf_4xine_7libxine_xineOpen(PyObject *__pyx_v_self, PyObject *__pyx_arg_Mrl); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineOpen(PyObject *__pyx_v_self, PyObject *__pyx_arg_Mrl) {
  char *__pyx_v_Mrl;
  PyObject *__pyx_v_Open;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_SetupRefcountContext("xineOpen");
  assert(__pyx_arg_Mrl); {
    __pyx_v_Mrl = __Pyx_PyBytes_AsString(__pyx_arg_Mrl); if (unlikely((!__pyx_v_Mrl) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("xine.libxine.xineOpen");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_Open = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":518
 * 	# DONE: Unit tested
 * 	def xineOpen(self,char *Mrl):
 * 		Open = xine_open(self.xineStream,<ConstCharPtr *>Mrl)             # <<<<<<<<<<<<<<
 * 		if Open == 1:
 * 			return True
 */
  __pyx_t_1 = PyInt_FromLong(xine_open(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineStream, ((const char *)__pyx_v_Mrl))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_Open);
  __pyx_v_Open = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":519
 * 	def xineOpen(self,char *Mrl):
 * 		Open = xine_open(self.xineStream,<ConstCharPtr *>Mrl)
 * 		if Open == 1:             # <<<<<<<<<<<<<<
 * 			return True
 * 		elif Open == 0:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_Open, __pyx_int_1, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":520
 * 		Open = xine_open(self.xineStream,<ConstCharPtr *>Mrl)
 * 		if Open == 1:
 * 			return True             # <<<<<<<<<<<<<<
 * 		elif Open == 0:
 * 			self.xineGetError()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":521
 * 		if Open == 1:
 * 			return True
 * 		elif Open == 0:             # <<<<<<<<<<<<<<
 * 			self.xineGetError()
 * 			return False
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_Open, __pyx_int_0, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":522
 * 			return True
 * 		elif Open == 0:
 * 			self.xineGetError()             # <<<<<<<<<<<<<<
 * 			return False
 * 
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_xineGetError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":523
 * 		elif Open == 0:
 * 			self.xineGetError()
 * 			return False             # <<<<<<<<<<<<<<
 * 
 * 	# DONE: Tested
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xine.libxine.xineOpen");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_Open);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":527
 * 	# DONE: Tested
 * 	# DONE: Unit tested
 * 	def xinePlay(self,int StartPosition, int StartTime):             # <<<<<<<<<<<<<<
 * 		Play = xine_play(self.xineStream,StartPosition,StartTime)
 * 		if Play:
 */

static PyObject *__pyx_pf_4xine_7libxine_xinePlay(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xinePlay(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_StartPosition;
  int __pyx_v_StartTime;
  PyObject *__pyx_v_Play;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_StartPosition,&__pyx_kp_StartTime,0};
  __Pyx_SetupRefcountContext("xinePlay");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_StartPosition);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_StartTime);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("xinePlay", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "xinePlay") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_StartPosition = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_StartPosition == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_StartTime = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_StartTime == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_StartPosition = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_StartPosition == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_StartTime = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_StartTime == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("xinePlay", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("xine.libxine.xinePlay");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_Play = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":528
 * 	# DONE: Unit tested
 * 	def xinePlay(self,int StartPosition, int StartTime):
 * 		Play = xine_play(self.xineStream,StartPosition,StartTime)             # <<<<<<<<<<<<<<
 * 		if Play:
 * 			return True
 */
  __pyx_t_1 = PyInt_FromLong(xine_play(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineStream, __pyx_v_StartPosition, __pyx_v_StartTime)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_Play);
  __pyx_v_Play = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":529
 * 	def xinePlay(self,int StartPosition, int StartTime):
 * 		Play = xine_play(self.xineStream,StartPosition,StartTime)
 * 		if Play:             # <<<<<<<<<<<<<<
 * 			return True
 * 		else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_Play); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":530
 * 		Play = xine_play(self.xineStream,StartPosition,StartTime)
 * 		if Play:
 * 			return True             # <<<<<<<<<<<<<<
 * 		else:
 * 			self.xineGetError()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":532
 * 			return True
 * 		else:
 * 			self.xineGetError()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_xineGetError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xine.libxine.xinePlay");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_Play);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":537
 * 	# Stop stream playback
 * 	# xine_stream_t stays valid for new xine_open or xine_play
 * 	def xineStop(self):             # <<<<<<<<<<<<<<
 * 		xine_stop(self.xineStream)
 * 	# Stop stream playback, free all stream-related resources
 */

static PyObject *__pyx_pf_4xine_7libxine_xineStop(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineStop(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineStop");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":538
 * 	# xine_stream_t stays valid for new xine_open or xine_play
 * 	def xineStop(self):
 * 		xine_stop(self.xineStream)             # <<<<<<<<<<<<<<
 * 	# Stop stream playback, free all stream-related resources
 * 	# xine_stream_t stays valid for new xine_open or xine_play
 */
  xine_stop(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineStream);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":541
 * 	# Stop stream playback, free all stream-related resources
 * 	# xine_stream_t stays valid for new xine_open or xine_play
 * 	def xineClose(self):             # <<<<<<<<<<<<<<
 * 		xine_close(self.xineStream)
 * 	# Ask current/recent input plugin to eject media - may or may not work,
 */

static PyObject *__pyx_pf_4xine_7libxine_xineClose(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineClose(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineClose");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":542
 * 	# xine_stream_t stays valid for new xine_open or xine_play
 * 	def xineClose(self):
 * 		xine_close(self.xineStream)             # <<<<<<<<<<<<<<
 * 	# Ask current/recent input plugin to eject media - may or may not work,
 * 	# depending on input plugin capabilities
 */
  xine_close(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineStream);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":545
 * 	# Ask current/recent input plugin to eject media - may or may not work,
 * 	# depending on input plugin capabilities
 * 	def xineEject(self):             # <<<<<<<<<<<<<<
 * 		return xine_eject(self.xineStream)
 * 	# stop playback, dispose all stream-related resources
 */

static PyObject *__pyx_pf_4xine_7libxine_xineEject(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineEject(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("xineEject");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":546
 * 	# depending on input plugin capabilities
 * 	def xineEject(self):
 * 		return xine_eject(self.xineStream)             # <<<<<<<<<<<<<<
 * 	# stop playback, dispose all stream-related resources
 * 	# xine_stream_t no longer valid when after this
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(xine_eject(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineStream)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("xine.libxine.xineEject");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":549
 * 	# stop playback, dispose all stream-related resources
 * 	# xine_stream_t no longer valid when after this
 * 	def xineDispose(self):             # <<<<<<<<<<<<<<
 * 		xine_dispose(self.xineStream)
 * 
 */

static PyObject *__pyx_pf_4xine_7libxine_xineDispose(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineDispose(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineDispose");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":550
 * 	# xine_stream_t no longer valid when after this
 * 	def xineDispose(self):
 * 		xine_dispose(self.xineStream)             # <<<<<<<<<<<<<<
 * 
 * 	def xineEngineSetParam(self,int Parameter,int Value):
 */
  xine_dispose(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineStream);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":552
 * 		xine_dispose(self.xineStream)
 * 
 * 	def xineEngineSetParam(self,int Parameter,int Value):             # <<<<<<<<<<<<<<
 * 		xine_engine_set_param(self.xinePtr,Parameter,Value)
 * 	def xineEngineGetParam(self,int Parameter):
 */

static PyObject *__pyx_pf_4xine_7libxine_xineEngineSetParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineEngineSetParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_Parameter;
  int __pyx_v_Value;
  PyObject *__pyx_r = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_Parameter,&__pyx_kp_Value,0};
  __Pyx_SetupRefcountContext("xineEngineSetParam");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_Parameter);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_Value);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("xineEngineSetParam", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "xineEngineSetParam") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_Parameter = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_Parameter == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_Value = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_Value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_Parameter = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_Parameter == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_Value = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_Value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("xineEngineSetParam", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("xine.libxine.xineEngineSetParam");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":553
 * 
 * 	def xineEngineSetParam(self,int Parameter,int Value):
 * 		xine_engine_set_param(self.xinePtr,Parameter,Value)             # <<<<<<<<<<<<<<
 * 	def xineEngineGetParam(self,int Parameter):
 * 		return xine_engine_get_param(self.xinePtr,Parameter)
 */
  xine_engine_set_param(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xinePtr, __pyx_v_Parameter, __pyx_v_Value);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":554
 * 	def xineEngineSetParam(self,int Parameter,int Value):
 * 		xine_engine_set_param(self.xinePtr,Parameter,Value)
 * 	def xineEngineGetParam(self,int Parameter):             # <<<<<<<<<<<<<<
 * 		return xine_engine_get_param(self.xinePtr,Parameter)
 * 	def xineGetStatus(self):
 */

static PyObject *__pyx_pf_4xine_7libxine_xineEngineGetParam(PyObject *__pyx_v_self, PyObject *__pyx_arg_Parameter); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineEngineGetParam(PyObject *__pyx_v_self, PyObject *__pyx_arg_Parameter) {
  int __pyx_v_Parameter;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("xineEngineGetParam");
  assert(__pyx_arg_Parameter); {
    __pyx_v_Parameter = __Pyx_PyInt_AsInt(__pyx_arg_Parameter); if (unlikely((__pyx_v_Parameter == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("xine.libxine.xineEngineGetParam");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":555
 * 		xine_engine_set_param(self.xinePtr,Parameter,Value)
 * 	def xineEngineGetParam(self,int Parameter):
 * 		return xine_engine_get_param(self.xinePtr,Parameter)             # <<<<<<<<<<<<<<
 * 	def xineGetStatus(self):
 * 		Status = xine_get_status(self.xineStream)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(xine_engine_get_param(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xinePtr, __pyx_v_Parameter)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("xine.libxine.xineEngineGetParam");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":556
 * 	def xineEngineGetParam(self,int Parameter):
 * 		return xine_engine_get_param(self.xinePtr,Parameter)
 * 	def xineGetStatus(self):             # <<<<<<<<<<<<<<
 * 		Status = xine_get_status(self.xineStream)
 * 		if Status == 0:
 */

static PyObject *__pyx_pf_4xine_7libxine_xineGetStatus(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineGetStatus(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_v_Status;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_SetupRefcountContext("xineGetStatus");
  __pyx_v_Status = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":557
 * 		return xine_engine_get_param(self.xinePtr,Parameter)
 * 	def xineGetStatus(self):
 * 		Status = xine_get_status(self.xineStream)             # <<<<<<<<<<<<<<
 * 		if Status == 0:
 * 			return "XINE_STATUS_IDLE"
 */
  __pyx_t_1 = PyInt_FromLong(xine_get_status(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineStream)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_Status);
  __pyx_v_Status = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":558
 * 	def xineGetStatus(self):
 * 		Status = xine_get_status(self.xineStream)
 * 		if Status == 0:             # <<<<<<<<<<<<<<
 * 			return "XINE_STATUS_IDLE"
 * 		if Status == 1:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_Status, __pyx_int_0, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":559
 * 		Status = xine_get_status(self.xineStream)
 * 		if Status == 0:
 * 			return "XINE_STATUS_IDLE"             # <<<<<<<<<<<<<<
 * 		if Status == 1:
 * 			return "XINE_STATUS_STOP"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_11);
    __pyx_r = __pyx_kp_11;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":560
 * 		if Status == 0:
 * 			return "XINE_STATUS_IDLE"
 * 		if Status == 1:             # <<<<<<<<<<<<<<
 * 			return "XINE_STATUS_STOP"
 * 		if Status == 2:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_Status, __pyx_int_1, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":561
 * 			return "XINE_STATUS_IDLE"
 * 		if Status == 1:
 * 			return "XINE_STATUS_STOP"             # <<<<<<<<<<<<<<
 * 		if Status == 2:
 * 			return "XINE_STATUS_PLAY"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_12);
    __pyx_r = __pyx_kp_12;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":562
 * 		if Status == 1:
 * 			return "XINE_STATUS_STOP"
 * 		if Status == 2:             # <<<<<<<<<<<<<<
 * 			return "XINE_STATUS_PLAY"
 * 		if Status == 3:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_Status, __pyx_int_2, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":563
 * 			return "XINE_STATUS_STOP"
 * 		if Status == 2:
 * 			return "XINE_STATUS_PLAY"             # <<<<<<<<<<<<<<
 * 		if Status == 3:
 * 			return "XINE_STATUS_QUIT"
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_13);
    __pyx_r = __pyx_kp_13;
    goto __pyx_L0;
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":564
 * 		if Status == 2:
 * 			return "XINE_STATUS_PLAY"
 * 		if Status == 3:             # <<<<<<<<<<<<<<
 * 			return "XINE_STATUS_QUIT"
 * 	#def xineGetPosLength(self,int *PosStream,int *PosTime,int *LengthTime):
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_Status, __pyx_int_3, Py_EQ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":565
 * 			return "XINE_STATUS_PLAY"
 * 		if Status == 3:
 * 			return "XINE_STATUS_QUIT"             # <<<<<<<<<<<<<<
 * 	#def xineGetPosLength(self,int *PosStream,int *PosTime,int *LengthTime):
 * 	#	Len = xine_get_pos_length(self.xineStream,PosStream,PosTime,LengthTime)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_14);
    __pyx_r = __pyx_kp_14;
    goto __pyx_L0;
    goto __pyx_L8;
  }
  __pyx_L8:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("xine.libxine.xineGetStatus");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_Status);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":572
 * 	#	else:
 * 	#		return False
 * 	def xineGetStreamInfo(self,int Info):             # <<<<<<<<<<<<<<
 * 		In = xine_get_stream_info(self.xineStream,Info)
 * 		return In
 */

static PyObject *__pyx_pf_4xine_7libxine_xineGetStreamInfo(PyObject *__pyx_v_self, PyObject *__pyx_arg_Info); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineGetStreamInfo(PyObject *__pyx_v_self, PyObject *__pyx_arg_Info) {
  int __pyx_v_Info;
  PyObject *__pyx_v_In;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("xineGetStreamInfo");
  assert(__pyx_arg_Info); {
    __pyx_v_Info = __Pyx_PyInt_AsInt(__pyx_arg_Info); if (unlikely((__pyx_v_Info == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("xine.libxine.xineGetStreamInfo");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_In = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":573
 * 	#		return False
 * 	def xineGetStreamInfo(self,int Info):
 * 		In = xine_get_stream_info(self.xineStream,Info)             # <<<<<<<<<<<<<<
 * 		return In
 * 	#define XINE_META_INFO_TITLE               0
 */
  __pyx_t_1 = PyInt_FromLong(xine_get_stream_info(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineStream, __pyx_v_Info)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_In);
  __pyx_v_In = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":574
 * 	def xineGetStreamInfo(self,int Info):
 * 		In = xine_get_stream_info(self.xineStream,Info)
 * 		return In             # <<<<<<<<<<<<<<
 * 	#define XINE_META_INFO_TITLE               0
 * 	#define XINE_META_INFO_COMMENT             1
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_In);
  __pyx_r = __pyx_v_In;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("xine.libxine.xineGetStreamInfo");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_In);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":588
 * 	#define XINE_META_INFO_TRACK_NUMBER        11
 * 	#define XINE_META_INFO_COMPOSER            12
 * 	def xineGetMetaInfo(self,int Info):             # <<<<<<<<<<<<<<
 * 		MetaTable = {
 * 			0: "Title",
 */

static PyObject *__pyx_pf_4xine_7libxine_xineGetMetaInfo(PyObject *__pyx_v_self, PyObject *__pyx_arg_Info); /*proto*/
static PyObject *__pyx_pf_4xine_7libxine_xineGetMetaInfo(PyObject *__pyx_v_self, PyObject *__pyx_arg_Info) {
  int __pyx_v_Info;
  PyObject *__pyx_v_MetaTable;
  char *__pyx_v_GetMeta;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_SetupRefcountContext("xineGetMetaInfo");
  assert(__pyx_arg_Info); {
    __pyx_v_Info = __Pyx_PyInt_AsInt(__pyx_arg_Info); if (unlikely((__pyx_v_Info == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("xine.libxine.xineGetMetaInfo");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_MetaTable = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":589
 * 	#define XINE_META_INFO_COMPOSER            12
 * 	def xineGetMetaInfo(self,int Info):
 * 		MetaTable = {             # <<<<<<<<<<<<<<
 * 			0: "Title",
 * 			1: "Comment",
 */
  __pyx_1 = PyDict_New(); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":590
 * 	def xineGetMetaInfo(self,int Info):
 * 		MetaTable = {
 * 			0: "Title",             # <<<<<<<<<<<<<<
 * 			1: "Comment",
 * 			2: "Artist",
 */
  if (PyDict_SetItem(__pyx_1, __pyx_int_0, __pyx_kp_15) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":591
 * 		MetaTable = {
 * 			0: "Title",
 * 			1: "Comment",             # <<<<<<<<<<<<<<
 * 			2: "Artist",
 * 			3: "Genre",
 */
  if (PyDict_SetItem(__pyx_1, __pyx_int_1, __pyx_kp_16) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":592
 * 			0: "Title",
 * 			1: "Comment",
 * 			2: "Artist",             # <<<<<<<<<<<<<<
 * 			3: "Genre",
 * 			4: "Album",
 */
  if (PyDict_SetItem(__pyx_1, __pyx_int_2, __pyx_kp_17) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":593
 * 			1: "Comment",
 * 			2: "Artist",
 * 			3: "Genre",             # <<<<<<<<<<<<<<
 * 			4: "Album",
 * 			5: "Year"
 */
  if (PyDict_SetItem(__pyx_1, __pyx_int_3, __pyx_kp_18) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":594
 * 			2: "Artist",
 * 			3: "Genre",
 * 			4: "Album",             # <<<<<<<<<<<<<<
 * 			5: "Year"
 * 		}
 */
  if (PyDict_SetItem(__pyx_1, __pyx_int_4, __pyx_kp_19) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":595
 * 			3: "Genre",
 * 			4: "Album",
 * 			5: "Year"             # <<<<<<<<<<<<<<
 * 		}
 * 
 */
  if (PyDict_SetItem(__pyx_1, __pyx_int_5, __pyx_kp_20) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_v_MetaTable);
  __pyx_v_MetaTable = ((PyObject *)__pyx_1);
  __pyx_1 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":599
 * 
 * 		cdef char *GetMeta
 * 		GetMeta = <char *>xine_get_meta_info(self.xineStream,Info)             # <<<<<<<<<<<<<<
 * 		if GetMeta == NULL:
 * 			raise Exception('MetaFail')
 */
  __pyx_v_GetMeta = ((char *)xine_get_meta_info(((struct __pyx_obj_4xine_libxine *)__pyx_v_self)->xineStream, __pyx_v_Info));

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":600
 * 		cdef char *GetMeta
 * 		GetMeta = <char *>xine_get_meta_info(self.xineStream,Info)
 * 		if GetMeta == NULL:             # <<<<<<<<<<<<<<
 * 			raise Exception('MetaFail')
 * 		return MetaTable[Info],GetMeta
 */
  __pyx_t_1 = (__pyx_v_GetMeta == NULL);
  if (__pyx_t_1) {

    /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":601
 * 		GetMeta = <char *>xine_get_meta_info(self.xineStream,Info)
 * 		if GetMeta == NULL:
 * 			raise Exception('MetaFail')             # <<<<<<<<<<<<<<
 * 		return MetaTable[Info],GetMeta
 * 	cdef extern xineGetLoadSectionCount(self):
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_INCREF(__pyx_kp_21);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_21);
    __Pyx_GIVEREF(__pyx_kp_21);
    __pyx_t_3 = PyObject_Call(__pyx_builtin_Exception, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":602
 * 		if GetMeta == NULL:
 * 			raise Exception('MetaFail')
 * 		return MetaTable[Info],GetMeta             # <<<<<<<<<<<<<<
 * 	cdef extern xineGetLoadSectionCount(self):
 * 		return xine_get_log_section_count(self.xinePtr)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_1 = __Pyx_GetItemInt(__pyx_v_MetaTable, __pyx_v_Info, sizeof(int), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_1);
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_GetMeta); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_1);
  __Pyx_GIVEREF(__pyx_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("xine.libxine.xineGetMetaInfo");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_MetaTable);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":603
 * 			raise Exception('MetaFail')
 * 		return MetaTable[Info],GetMeta
 * 	cdef extern xineGetLoadSectionCount(self):             # <<<<<<<<<<<<<<
 * 		return xine_get_log_section_count(self.xinePtr)
 * 	cdef extern xineEventNewQueue(self, xine_stream_t *Stream):
 */

__PYX_EXTERN_C  PyObject *__pyx_f_4xine_7libxine_xineGetLoadSectionCount(struct __pyx_obj_4xine_libxine *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("xineGetLoadSectionCount");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":604
 * 		return MetaTable[Info],GetMeta
 * 	cdef extern xineGetLoadSectionCount(self):
 * 		return xine_get_log_section_count(self.xinePtr)             # <<<<<<<<<<<<<<
 * 	cdef extern xineEventNewQueue(self, xine_stream_t *Stream):
 * 		self.xineEventQueue = xine_event_new_queue(Stream)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(xine_get_log_section_count(__pyx_v_self->xinePtr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("xine.libxine.xineGetLoadSectionCount");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":605
 * 	cdef extern xineGetLoadSectionCount(self):
 * 		return xine_get_log_section_count(self.xinePtr)
 * 	cdef extern xineEventNewQueue(self, xine_stream_t *Stream):             # <<<<<<<<<<<<<<
 * 		self.xineEventQueue = xine_event_new_queue(Stream)
 * 	cdef extern xineConfigLoad(self,ConstCharPtr *Filename):
 */

__PYX_EXTERN_C  PyObject *__pyx_f_4xine_7libxine_xineEventNewQueue(struct __pyx_obj_4xine_libxine *__pyx_v_self, xine_stream_t *__pyx_v_Stream) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineEventNewQueue");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":606
 * 		return xine_get_log_section_count(self.xinePtr)
 * 	cdef extern xineEventNewQueue(self, xine_stream_t *Stream):
 * 		self.xineEventQueue = xine_event_new_queue(Stream)             # <<<<<<<<<<<<<<
 * 	cdef extern xineConfigLoad(self,ConstCharPtr *Filename):
 * 		xine_config_load(self.xinePtr,Filename)
 */
  __pyx_v_self->xineEventQueue = xine_event_new_queue(__pyx_v_Stream);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":607
 * 	cdef extern xineEventNewQueue(self, xine_stream_t *Stream):
 * 		self.xineEventQueue = xine_event_new_queue(Stream)
 * 	cdef extern xineConfigLoad(self,ConstCharPtr *Filename):             # <<<<<<<<<<<<<<
 * 		xine_config_load(self.xinePtr,Filename)
 * '''
 */

__PYX_EXTERN_C  PyObject *__pyx_f_4xine_7libxine_xineConfigLoad(struct __pyx_obj_4xine_libxine *__pyx_v_self, const char *__pyx_v_Filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("xineConfigLoad");

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":608
 * 		self.xineEventQueue = xine_event_new_queue(Stream)
 * 	cdef extern xineConfigLoad(self,ConstCharPtr *Filename):
 * 		xine_config_load(self.xinePtr,Filename)             # <<<<<<<<<<<<<<
 * '''
 * cdef class xine:
 */
  xine_config_load(__pyx_v_self->xinePtr, __pyx_v_Filename);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4xine_AudioEngine(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4xine_AudioEngine *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_4xine_AudioEngine *)o);
  p->MrlQueue = Py_None; Py_INCREF(Py_None);
  p->LibXine = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_4xine_AudioEngine(PyObject *o) {
  struct __pyx_obj_4xine_AudioEngine *p = (struct __pyx_obj_4xine_AudioEngine *)o;
  Py_XDECREF(p->MrlQueue);
  Py_XDECREF(p->LibXine);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4xine_AudioEngine(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4xine_AudioEngine *p = (struct __pyx_obj_4xine_AudioEngine *)o;
  if (p->MrlQueue) {
    e = (*v)(p->MrlQueue, a); if (e) return e;
  }
  if (p->LibXine) {
    e = (*v)(p->LibXine, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4xine_AudioEngine(PyObject *o) {
  struct __pyx_obj_4xine_AudioEngine *p = (struct __pyx_obj_4xine_AudioEngine *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->MrlQueue);
  p->MrlQueue = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->LibXine);
  p->LibXine = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static struct PyMethodDef __pyx_methods_4xine_AudioEngine[] = {
  {__Pyx_NAMESTR("Initialize"), (PyCFunction)__pyx_pf_4xine_11AudioEngine_Initialize, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("DeInitialize"), (PyCFunction)__pyx_pf_4xine_11AudioEngine_DeInitialize, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("Open"), (PyCFunction)__pyx_pf_4xine_11AudioEngine_Open, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("Play"), (PyCFunction)__pyx_pf_4xine_11AudioEngine_Play, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("Stop"), (PyCFunction)__pyx_pf_4xine_11AudioEngine_Stop, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("PlayStatus"), (PyCFunction)__pyx_pf_4xine_11AudioEngine_PlayStatus, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("PollStatus"), (PyCFunction)__pyx_pf_4xine_11AudioEngine_PollStatus, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("GetMeta"), (PyCFunction)__pyx_pf_4xine_11AudioEngine_GetMeta, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("GetAllMeta"), (PyCFunction)__pyx_pf_4xine_11AudioEngine_GetAllMeta, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("GetStreamInfo"), (PyCFunction)__pyx_pf_4xine_11AudioEngine_GetStreamInfo, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("GetAllStreamInfo"), (PyCFunction)__pyx_pf_4xine_11AudioEngine_GetAllStreamInfo, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_AudioEngine = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  0, /*nb_long*/
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_AudioEngine = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_AudioEngine = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_AudioEngine = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_4xine_AudioEngine = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("xine.AudioEngine"), /*tp_name*/
  sizeof(struct __pyx_obj_4xine_AudioEngine), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4xine_AudioEngine, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_AudioEngine, /*tp_as_number*/
  &__pyx_tp_as_sequence_AudioEngine, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_AudioEngine, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_AudioEngine, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_4xine_AudioEngine, /*tp_traverse*/
  __pyx_tp_clear_4xine_AudioEngine, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4xine_AudioEngine, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_4xine_11AudioEngine___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4xine_AudioEngine, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};
static struct __pyx_vtabstruct_4xine_libxine __pyx_vtable_4xine_libxine;

static PyObject *__pyx_tp_new_4xine_libxine(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4xine_libxine *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_4xine_libxine *)o);
  p->__pyx_vtab = __pyx_vtabptr_4xine_libxine;
  return o;
}

static void __pyx_tp_dealloc_4xine_libxine(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static struct PyMethodDef __pyx_methods_4xine_libxine[] = {
  {__Pyx_NAMESTR("xineGetError"), (PyCFunction)__pyx_pf_4xine_7libxine_xineGetError, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineGetVersionString"), (PyCFunction)__pyx_pf_4xine_7libxine_xineGetVersionString, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineCheckVersion"), (PyCFunction)__pyx_pf_4xine_7libxine_xineCheckVersion, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineNew"), (PyCFunction)__pyx_pf_4xine_7libxine_xineNew, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("dbg_xineNew"), (PyCFunction)__pyx_pf_4xine_7libxine_dbg_xineNew, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineInit"), (PyCFunction)__pyx_pf_4xine_7libxine_xineInit, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineExit"), (PyCFunction)__pyx_pf_4xine_7libxine_xineExit, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineOpenAudioDriver"), (PyCFunction)__pyx_pf_4xine_7libxine_xineOpenAudioDriver, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("dbg_xineOpenAudioDriver"), (PyCFunction)__pyx_pf_4xine_7libxine_dbg_xineOpenAudioDriver, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineCloseAudioDriver"), (PyCFunction)__pyx_pf_4xine_7libxine_xineCloseAudioDriver, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineStreamNew"), (PyCFunction)__pyx_pf_4xine_7libxine_xineStreamNew, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("dbg_xineStreamNew"), (PyCFunction)__pyx_pf_4xine_7libxine_dbg_xineStreamNew, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineOpen"), (PyCFunction)__pyx_pf_4xine_7libxine_xineOpen, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xinePlay"), (PyCFunction)__pyx_pf_4xine_7libxine_xinePlay, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineStop"), (PyCFunction)__pyx_pf_4xine_7libxine_xineStop, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineClose"), (PyCFunction)__pyx_pf_4xine_7libxine_xineClose, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineEject"), (PyCFunction)__pyx_pf_4xine_7libxine_xineEject, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineDispose"), (PyCFunction)__pyx_pf_4xine_7libxine_xineDispose, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineEngineSetParam"), (PyCFunction)__pyx_pf_4xine_7libxine_xineEngineSetParam, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineEngineGetParam"), (PyCFunction)__pyx_pf_4xine_7libxine_xineEngineGetParam, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineGetStatus"), (PyCFunction)__pyx_pf_4xine_7libxine_xineGetStatus, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineGetStreamInfo"), (PyCFunction)__pyx_pf_4xine_7libxine_xineGetStreamInfo, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("xineGetMetaInfo"), (PyCFunction)__pyx_pf_4xine_7libxine_xineGetMetaInfo, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_libxine = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  0, /*nb_long*/
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_libxine = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_libxine = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_libxine = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_4xine_libxine = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("xine.libxine"), /*tp_name*/
  sizeof(struct __pyx_obj_4xine_libxine), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4xine_libxine, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_libxine, /*tp_as_number*/
  &__pyx_tp_as_sequence_libxine, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_libxine, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_libxine, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4xine_libxine, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4xine_libxine, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static struct PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static void __pyx_init_filenames(void); /*proto*/

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("xine"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp___init__, __pyx_k___init__, sizeof(__pyx_k___init__), 1, 1, 1},
  {&__pyx_kp_Initialize, __pyx_k_Initialize, sizeof(__pyx_k_Initialize), 1, 1, 1},
  {&__pyx_kp_DeInitialize, __pyx_k_DeInitialize, sizeof(__pyx_k_DeInitialize), 1, 1, 1},
  {&__pyx_kp_Open, __pyx_k_Open, sizeof(__pyx_k_Open), 1, 1, 1},
  {&__pyx_kp_Play, __pyx_k_Play, sizeof(__pyx_k_Play), 1, 1, 1},
  {&__pyx_kp_Stop, __pyx_k_Stop, sizeof(__pyx_k_Stop), 1, 1, 1},
  {&__pyx_kp_PlayStatus, __pyx_k_PlayStatus, sizeof(__pyx_k_PlayStatus), 1, 1, 1},
  {&__pyx_kp_PollStatus, __pyx_k_PollStatus, sizeof(__pyx_k_PollStatus), 1, 1, 1},
  {&__pyx_kp_GetMeta, __pyx_k_GetMeta, sizeof(__pyx_k_GetMeta), 1, 1, 1},
  {&__pyx_kp_GetAllMeta, __pyx_k_GetAllMeta, sizeof(__pyx_k_GetAllMeta), 1, 1, 1},
  {&__pyx_kp_GetStreamInfo, __pyx_k_GetStreamInfo, sizeof(__pyx_k_GetStreamInfo), 1, 1, 1},
  {&__pyx_kp_GetAllStreamInfo, __pyx_k_GetAllStreamInfo, sizeof(__pyx_k_GetAllStreamInfo), 1, 1, 1},
  {&__pyx_kp_xineGetError, __pyx_k_xineGetError, sizeof(__pyx_k_xineGetError), 1, 1, 1},
  {&__pyx_kp_1, __pyx_k_1, sizeof(__pyx_k_1), 1, 1, 1},
  {&__pyx_kp_xineCheckVersion, __pyx_k_xineCheckVersion, sizeof(__pyx_k_xineCheckVersion), 1, 1, 1},
  {&__pyx_kp_xineNew, __pyx_k_xineNew, sizeof(__pyx_k_xineNew), 1, 1, 1},
  {&__pyx_kp_dbg_xineNew, __pyx_k_dbg_xineNew, sizeof(__pyx_k_dbg_xineNew), 1, 1, 1},
  {&__pyx_kp_xineInit, __pyx_k_xineInit, sizeof(__pyx_k_xineInit), 1, 1, 1},
  {&__pyx_kp_xineExit, __pyx_k_xineExit, sizeof(__pyx_k_xineExit), 1, 1, 1},
  {&__pyx_kp_xineOpenAudioDriver, __pyx_k_xineOpenAudioDriver, sizeof(__pyx_k_xineOpenAudioDriver), 1, 1, 1},
  {&__pyx_kp_2, __pyx_k_2, sizeof(__pyx_k_2), 1, 1, 1},
  {&__pyx_kp_3, __pyx_k_3, sizeof(__pyx_k_3), 1, 1, 1},
  {&__pyx_kp_xineStreamNew, __pyx_k_xineStreamNew, sizeof(__pyx_k_xineStreamNew), 1, 1, 1},
  {&__pyx_kp_dbg_xineStreamNew, __pyx_k_dbg_xineStreamNew, sizeof(__pyx_k_dbg_xineStreamNew), 1, 1, 1},
  {&__pyx_kp_xineOpen, __pyx_k_xineOpen, sizeof(__pyx_k_xineOpen), 1, 1, 1},
  {&__pyx_kp_xinePlay, __pyx_k_xinePlay, sizeof(__pyx_k_xinePlay), 1, 1, 1},
  {&__pyx_kp_xineStop, __pyx_k_xineStop, sizeof(__pyx_k_xineStop), 1, 1, 1},
  {&__pyx_kp_xineClose, __pyx_k_xineClose, sizeof(__pyx_k_xineClose), 1, 1, 1},
  {&__pyx_kp_xineEject, __pyx_k_xineEject, sizeof(__pyx_k_xineEject), 1, 1, 1},
  {&__pyx_kp_xineDispose, __pyx_k_xineDispose, sizeof(__pyx_k_xineDispose), 1, 1, 1},
  {&__pyx_kp_xineEngineSetParam, __pyx_k_xineEngineSetParam, sizeof(__pyx_k_xineEngineSetParam), 1, 1, 1},
  {&__pyx_kp_xineEngineGetParam, __pyx_k_xineEngineGetParam, sizeof(__pyx_k_xineEngineGetParam), 1, 1, 1},
  {&__pyx_kp_xineGetStatus, __pyx_k_xineGetStatus, sizeof(__pyx_k_xineGetStatus), 1, 1, 1},
  {&__pyx_kp_xineGetStreamInfo, __pyx_k_xineGetStreamInfo, sizeof(__pyx_k_xineGetStreamInfo), 1, 1, 1},
  {&__pyx_kp_xineGetMetaInfo, __pyx_k_xineGetMetaInfo, sizeof(__pyx_k_xineGetMetaInfo), 1, 1, 1},
  {&__pyx_kp_File, __pyx_k_File, sizeof(__pyx_k_File), 1, 1, 1},
  {&__pyx_kp_xineMetaCode, __pyx_k_xineMetaCode, sizeof(__pyx_k_xineMetaCode), 1, 1, 1},
  {&__pyx_kp_xineStreamCode, __pyx_k_xineStreamCode, sizeof(__pyx_k_xineStreamCode), 1, 1, 1},
  {&__pyx_kp_Major, __pyx_k_Major, sizeof(__pyx_k_Major), 1, 1, 1},
  {&__pyx_kp_Minor, __pyx_k_Minor, sizeof(__pyx_k_Minor), 1, 1, 1},
  {&__pyx_kp_Sub, __pyx_k_Sub, sizeof(__pyx_k_Sub), 1, 1, 1},
  {&__pyx_kp_Id, __pyx_k_Id, sizeof(__pyx_k_Id), 1, 1, 1},
  {&__pyx_kp_Mrl, __pyx_k_Mrl, sizeof(__pyx_k_Mrl), 1, 1, 1},
  {&__pyx_kp_StartPosition, __pyx_k_StartPosition, sizeof(__pyx_k_StartPosition), 1, 1, 1},
  {&__pyx_kp_StartTime, __pyx_k_StartTime, sizeof(__pyx_k_StartTime), 1, 1, 1},
  {&__pyx_kp_Parameter, __pyx_k_Parameter, sizeof(__pyx_k_Parameter), 1, 1, 1},
  {&__pyx_kp_Value, __pyx_k_Value, sizeof(__pyx_k_Value), 1, 1, 1},
  {&__pyx_kp_Info, __pyx_k_Info, sizeof(__pyx_k_Info), 1, 1, 1},
  {&__pyx_kp_time, __pyx_k_time, sizeof(__pyx_k_time), 1, 1, 1},
  {&__pyx_kp_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 1, 0},
  {&__pyx_kp_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 1, 0},
  {&__pyx_kp_sleep, __pyx_k_sleep, sizeof(__pyx_k_sleep), 1, 1, 1},
  {&__pyx_kp_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 1, 1, 1},
  {&__pyx_kp_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 1, 0},
  {&__pyx_kp_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 1, 0},
  {&__pyx_kp_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 1, 0},
  {&__pyx_kp_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 1, 0},
  {&__pyx_kp_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 1, 0},
  {&__pyx_kp_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 1, 0},
  {&__pyx_kp_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 1, 0},
  {&__pyx_kp_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 1, 0},
  {&__pyx_kp_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 1, 0},
  {&__pyx_kp_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 1, 0},
  {&__pyx_kp_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 1, 0},
  {&__pyx_kp_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 1, 0},
  {&__pyx_kp_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 1, 0},
  {&__pyx_kp_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 1, 0},
  {&__pyx_kp_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 1, 0},
  {&__pyx_kp_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 1, 0},
  {0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_kp_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_35 = PyInt_FromLong(35); if (unlikely(!__pyx_int_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initxine(void); /*proto*/
PyMODINIT_FUNC initxine(void)
#else
PyMODINIT_FUNC PyInit_xine(void); /*proto*/
PyMODINIT_FUNC PyInit_xine(void)
#endif
{
  PyObject *__pyx_1 = 0;
  #ifdef CYTHON_REFNANNY
  void* __pyx_refchk = NULL;
  __Pyx_Refnanny = __Pyx_ImportRefcountAPI("refnanny");
  if (!__Pyx_Refnanny) {
      PyErr_Clear();
      __Pyx_Refnanny = __Pyx_ImportRefcountAPI("Cython.Runtime.refnanny");
      if (!__Pyx_Refnanny)
          Py_FatalError("failed to import refnanny module");
  }
  __pyx_refchk = __Pyx_Refnanny->NewContext("PyMODINIT_FUNC PyInit_xine(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Library function declarations ---*/
  __pyx_init_filenames();
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("xine"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_skip_dispatch = 0;
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_4xine_AudioEngine) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "AudioEngine", (PyObject *)&__pyx_type_4xine_AudioEngine) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4xine_AudioEngine = &__pyx_type_4xine_AudioEngine;
  __pyx_vtabptr_4xine_libxine = &__pyx_vtable_4xine_libxine;
  #if PY_MAJOR_VERSION >= 3
  __pyx_vtable_4xine_libxine.xineGetVersion = (PyObject *(*)(struct __pyx_obj_4xine_libxine *, int *, int *, int *))__pyx_f_4xine_7libxine_xineGetVersion;
  __pyx_vtable_4xine_libxine.xineOpenVideoDriver = (PyObject *(*)(struct __pyx_obj_4xine_libxine *, const char *, int, void *))__pyx_f_4xine_7libxine_xineOpenVideoDriver;
  __pyx_vtable_4xine_libxine.xineCloseVideoDriver = (PyObject *(*)(struct __pyx_obj_4xine_libxine *, xine_video_port_t *))__pyx_f_4xine_7libxine_xineCloseVideoDriver;
  __pyx_vtable_4xine_libxine.xineGetLoadSectionCount = (PyObject *(*)(struct __pyx_obj_4xine_libxine *))__pyx_f_4xine_7libxine_xineGetLoadSectionCount;
  __pyx_vtable_4xine_libxine.xineEventNewQueue = (PyObject *(*)(struct __pyx_obj_4xine_libxine *, xine_stream_t *))__pyx_f_4xine_7libxine_xineEventNewQueue;
  __pyx_vtable_4xine_libxine.xineConfigLoad = (PyObject *(*)(struct __pyx_obj_4xine_libxine *, const char *))__pyx_f_4xine_7libxine_xineConfigLoad;
  #else
  *(void(**)(void))&__pyx_vtable_4xine_libxine.xineGetVersion = (void(*)(void))__pyx_f_4xine_7libxine_xineGetVersion;
  *(void(**)(void))&__pyx_vtable_4xine_libxine.xineOpenVideoDriver = (void(*)(void))__pyx_f_4xine_7libxine_xineOpenVideoDriver;
  *(void(**)(void))&__pyx_vtable_4xine_libxine.xineCloseVideoDriver = (void(*)(void))__pyx_f_4xine_7libxine_xineCloseVideoDriver;
  *(void(**)(void))&__pyx_vtable_4xine_libxine.xineGetLoadSectionCount = (void(*)(void))__pyx_f_4xine_7libxine_xineGetLoadSectionCount;
  *(void(**)(void))&__pyx_vtable_4xine_libxine.xineEventNewQueue = (void(*)(void))__pyx_f_4xine_7libxine_xineEventNewQueue;
  *(void(**)(void))&__pyx_vtable_4xine_libxine.xineConfigLoad = (void(*)(void))__pyx_f_4xine_7libxine_xineConfigLoad;
  #endif
  if (PyType_Ready(&__pyx_type_4xine_libxine) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_4xine_libxine.tp_dict, __pyx_vtabptr_4xine_libxine) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "libxine", (PyObject *)&__pyx_type_4xine_libxine) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4xine_libxine = &__pyx_type_4xine_libxine;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "/home/bluemoon/Projects/Mosaic/src/cython/xine.pyx":381
 * # X.xineOpen("file")
 * # X.xinePlay(0,0)
 * import time             # <<<<<<<<<<<<<<
 * cdef class AudioEngine:
 * 	cdef object MrlQueue
 */
  __pyx_1 = __Pyx_Import(__pyx_kp_time, 0); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_kp_time, __pyx_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;

  /* "/home/bluemoon/Projects/Mosaic/src/cython/types.pxd":2
 *              # <<<<<<<<<<<<<<
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_AddTraceback("xine");
  Py_DECREF(__pyx_m); __pyx_m = 0;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

static const char *__pyx_filenames[] = {
  "xine.pyx",
};

/* Runtime support code */

static void __pyx_init_filenames(void) {
  __pyx_f = __pyx_filenames;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}


static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *__import__ = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    __import__ = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!__import__)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunctionObjArgs(__import__,
        name, global_dict, empty_dict, list, NULL);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(__import__);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

#if PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}

static int __Pyx_Print(PyObject *arg_tuple, int newline) {
    PyObject *f;
    PyObject* v;
    int i;

    if (!(f = __Pyx_GetStdout()))
        return -1;
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                return -1;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            return -1;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0 &&
                isspace(Py_CHARMASK(s[len-1])) &&
                s[len-1] != ' ')
                    PyFile_SoftSpace(f, 0);
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            return -1;
        PyFile_SoftSpace(f, 0);
    }
    return 0;
}

#else /* Python 3 has a print function */

static int __Pyx_Print(PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (!__pyx_print) {
        __pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
        if (!__pyx_print)
            return -1;
    }
    if (!newline) {
        if (!__pyx_print_kwargs) {
            __pyx_print_kwargs = PyDict_New();
            if (!__pyx_print_kwargs)
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (!end_string)
                return -1;
            if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
}

#endif

#if PY_MAJOR_VERSION < 3

static int __Pyx_PrintOne(PyObject *o) {
    PyObject *f;
    if (!(f = __Pyx_GetStdout()))
        return -1;
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            return -1;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        return -1;
    if (PyFile_WriteString("\n", f) < 0)
        return -1;
    return 0;
    /* the line below is just to avoid compiler
     * compiler warnings about unused functions */
    return __Pyx_Print(NULL, 0);
}

#else /* Python 3 has a print function */

static int __Pyx_PrintOne(PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_New(1);
    if (unlikely(!arg_tuple))
        return -1;
    Py_INCREF(o);
    PyTuple_SET_ITEM(arg_tuple, 0, o);
    res = __Pyx_Print(arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}

#endif

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

static INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

#if PY_MAJOR_VERSION >= 3
    /* Note: this is a temporary work-around to prevent crashes in Python 3.0 */
    if ((tstate->exc_type != NULL) & (tstate->exc_type != Py_None)) {
        tmp_type = tstate->exc_type;
        tmp_value = tstate->exc_value;
        tmp_tb = tstate->exc_traceback;
        PyErr_NormalizeException(&type, &value, &tb);
        PyErr_NormalizeException(&tmp_type, &tmp_value, &tmp_tb);
        tstate->exc_type = 0;
        tstate->exc_value = 0;
        tstate->exc_traceback = 0;
        PyException_SetContext(value, tmp_value);
        Py_DECREF(tmp_type);
        Py_XDECREF(tmp_tb);
    }
#endif

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


static INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
     while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
     return *s1 == *s2;
}

static INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned char)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned char");
                return (unsigned char)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned char");
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned short)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned short");
                return (unsigned short)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned short");
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned int)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned int");
                return (unsigned int)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned int");
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (char)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to char");
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (short)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to short");
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (int)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to int");
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed char)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed char");
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed short)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed short");
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed int)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed int");
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        if (unlikely(Py_SIZE(x) < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return PyLong_AsUnsignedLong(x);
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        if (unlikely(Py_SIZE(x) < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return PyLong_AsUnsignedLongLong(x);
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLong(x);
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLongLong(x);
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLong(x);
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLongLong(x);
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
    PyObject *pycobj = 0;
    int result;
    
    pycobj = PyCObject_FromVoidPtr(vtable, 0);
    if (!pycobj)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", pycobj) < 0)
        goto bad;
    result = 0;
    goto done;

bad:
    result = -1;
done:
    Py_XDECREF(pycobj);
    return result;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyObject *empty_string = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    #if PY_MAJOR_VERSION < 3
    empty_string = PyString_FromStringAndSize("", 0);
    #else
    empty_string = PyBytes_FromStringAndSize("", 0);
    #endif
    if (!empty_string) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        empty_string, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        empty_string  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(empty_string);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode && (!t->is_identifier)) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_identifier || (t->is_unicode && t->intern)) {
            *t->p = PyUnicode_InternFromString(t->s);
        } else if (t->is_unicode) {
            *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   if (x == Py_True) return 1;
   else if ((x == Py_False) | (x == Py_None)) return 0;
   else return PyObject_IsTrue(x);
}

static INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  else if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


